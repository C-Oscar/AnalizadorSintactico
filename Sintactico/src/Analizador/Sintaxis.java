
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 25 20:47:40 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 25 20:47:40 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\002\011\000\002\002" +
    "\011\000\002\002\010\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\006\005\000\002\006" +
    "\006\000\002\006\011\000\002\006\006\000\002\006\011" +
    "\000\002\006\005\000\002\006\006\000\002\006\011\000" +
    "\002\006\006\000\002\006\011\000\002\006\011\000\002" +
    "\006\010\000\002\006\005\000\002\006\010\000\002\006" +
    "\007\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\045\004\000\002\045\006\000" +
    "\002\045\007\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\025\004\000\002\011\007\000\002\011" +
    "\005\000\002\010\011\000\002\010\010\000\002\043\005" +
    "\000\002\043\005\000\002\043\007\000\002\043\007\000" +
    "\002\043\005\000\002\016\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\006\000\002\016" +
    "\007\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\004\000\002\027\005\000\002\036\011\000" +
    "\002\036\011\000\002\036\011\000\002\037\005\000\002" +
    "\037\005\000\002\037\010\000\002\037\010\000\002\037" +
    "\012\000\002\037\012\000\002\037\006\000\002\037\006" +
    "\000\002\037\010\000\002\037\010\000\002\037\005\000" +
    "\002\037\007\000\002\037\006\000\002\037\006\000\002" +
    "\037\011\000\002\037\011\000\002\037\013\000\002\037" +
    "\013\000\002\037\006\000\002\037\010\000\002\037\007" +
    "\000\002\037\007\000\002\037\011\000\002\037\011\000" +
    "\002\013\011\000\002\014\013\000\002\015\011\000\002" +
    "\017\004\000\002\017\003\000\002\030\011\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\020\007" +
    "\000\002\031\003\000\002\031\005\000\002\032\015\000" +
    "\002\032\013\000\002\032\007\000\002\033\011\000\002" +
    "\034\007\000\002\035\004\000\002\041\004\000\002\005" +
    "\004\000\002\026\004\000\002\046\010\000\002\012\010" +
    "\000\002\012\010\000\002\047\015\000\002\047\017\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\040\006\000\002\021" +
    "\006\000\002\022\005\000\002\022\005\000\002\023\005" +
    "\000\002\023\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\010\004\007\011\004\076\005\001\002\000" +
    "\004\076\u018d\001\002\000\004\072\u0188\001\002\000\004" +
    "\002\u0187\001\002\000\004\076\010\001\002\000\004\072" +
    "\011\001\002\000\004\073\012\001\002\000\004\074\013" +
    "\001\002\000\064\004\042\006\032\007\051\014\056\020" +
    "\064\021\067\023\024\024\044\026\020\030\054\031\040" +
    "\032\045\033\047\036\052\037\066\040\036\041\035\043" +
    "\027\045\034\047\037\052\015\053\025\054\053\104\061" +
    "\105\070\001\002\000\074\004\uffe6\006\uffe6\007\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\075\uffe6\104\uffe6\105\uffe6\001" +
    "\002\000\020\004\042\007\051\014\056\023\024\024\044" +
    "\043\027\045\034\001\002\000\074\004\ufffa\006\ufffa\007" +
    "\ufffa\014\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa\026\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\047\ufffa\052\ufffa\053\ufffa\054\ufffa\075\ufffa\104\ufffa\105" +
    "\ufffa\001\002\000\006\055\u017f\077\u017e\001\002\000\004" +
    "\072\u0177\001\002\000\074\004\ufff3\006\ufff3\007\ufff3\014" +
    "\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\026\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3\045\ufff3\047\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\075\ufff3\104\ufff3\105\ufff3\001" +
    "\002\000\066\004\042\006\032\007\051\014\056\020\064" +
    "\021\067\023\024\024\044\026\020\030\054\031\040\032" +
    "\045\033\047\036\052\037\066\040\036\041\035\043\027" +
    "\045\034\047\037\052\015\053\025\054\053\075\u0176\104" +
    "\061\105\070\001\002\000\074\004\ufff8\006\ufff8\007\ufff8" +
    "\014\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\026\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\047" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\075\ufff8\104\ufff8\105\ufff8" +
    "\001\002\000\006\062\u0165\103\u0166\001\002\000\004\072" +
    "\u015f\001\002\000\074\004\uffea\006\uffea\007\uffea\014\uffea" +
    "\020\uffea\021\uffea\023\uffea\024\uffea\026\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\043\uffea\044\uffea\045\uffea\047\uffea\052" +
    "\uffea\053\uffea\054\uffea\075\uffea\104\uffea\105\uffea\001\002" +
    "\000\004\103\u015a\001\002\000\074\004\uffdd\006\uffdd\007" +
    "\uffdd\014\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\026\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\052\uffdd\053\uffdd\054\uffdd\075\uffdd\104\uffdd\105" +
    "\uffdd\001\002\000\074\004\uffdb\006\uffdb\007\uffdb\014\uffdb" +
    "\020\uffdb\021\uffdb\023\uffdb\024\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\075\uffdb\104\uffdb\105\uffdb\001\002" +
    "\000\020\004\042\007\051\014\056\023\024\024\044\043" +
    "\027\045\034\001\002\000\074\004\uffec\006\uffec\007\uffec" +
    "\014\uffec\020\uffec\021\uffec\023\uffec\024\uffec\026\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\043\uffec\044\uffec\045\uffec\047" +
    "\uffec\052\uffec\053\uffec\054\uffec\075\uffec\104\uffec\105\uffec" +
    "\001\002\000\004\103\u0148\001\002\000\004\072\u0140\001" +
    "\002\000\004\072\u013c\001\002\000\014\010\u0118\022\u0115" +
    "\070\164\103\u0117\106\u0114\001\002\000\004\072\u010e\001" +
    "\002\000\074\004\ufff6\006\ufff6\007\ufff6\014\ufff6\020\ufff6" +
    "\021\ufff6\023\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\075\ufff6\104\ufff6\105\ufff6\001\002\000\006" +
    "\062\375\103\374\001\002\000\076\004\ufff2\006\ufff2\007" +
    "\ufff2\014\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\026\ufff2" +
    "\027\127\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\047\ufff2\052\ufff2\053\ufff2\054\ufff2\075\ufff2\104" +
    "\ufff2\105\ufff2\001\002\000\004\103\363\001\002\000\004" +
    "\072\335\001\002\000\074\004\uffdc\006\uffdc\007\uffdc\014" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\075\uffdc\104\uffdc\105\uffdc\001" +
    "\002\000\004\072\221\001\002\000\074\004\uffda\006\uffda" +
    "\007\uffda\014\uffda\020\uffda\021\uffda\023\uffda\024\uffda\026" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045" +
    "\uffda\047\uffda\052\uffda\053\uffda\054\uffda\075\uffda\104\uffda" +
    "\105\uffda\001\002\000\004\103\214\001\002\000\004\072" +
    "\204\001\002\000\004\072\200\001\002\000\004\074\156" +
    "\001\002\000\074\004\uffe2\006\uffe2\007\uffe2\014\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\075\uffe2\104\uffe2\105\uffe2\001\002\000" +
    "\004\077\155\001\002\000\074\004\ufffc\006\ufffc\007\ufffc" +
    "\014\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\026\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\043\ufffc\044\ufffc\045\ufffc\047" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\075\ufffc\104\ufffc\105\ufffc" +
    "\001\002\000\076\004\uffc8\006\uffc8\007\uffc8\014\uffc8\020" +
    "\uffc8\021\uffc8\023\uffc8\024\uffc8\026\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\073\uffc8\075\uffc8\104\uffc8\105\uffc8\001" +
    "\002\000\020\004\042\007\051\014\056\023\024\024\044" +
    "\043\027\045\034\001\002\000\074\004\ufff0\006\ufff0\007" +
    "\ufff0\014\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\026\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\047\ufff0\052\ufff0\053\ufff0\054\ufff0\075\ufff0\104\ufff0\105" +
    "\ufff0\001\002\000\076\004\uffc9\006\uffc9\007\uffc9\014\uffc9" +
    "\020\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\073\uffc9\075\uffc9\104\uffc9\105\uffc9" +
    "\001\002\000\020\004\042\007\051\014\056\023\024\024" +
    "\044\043\027\045\034\001\002\000\074\004\uffee\006\uffee" +
    "\007\uffee\014\uffee\020\uffee\021\uffee\023\uffee\024\uffee\026" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\045" +
    "\uffee\047\uffee\052\uffee\053\uffee\054\uffee\075\uffee\104\uffee" +
    "\105\uffee\001\002\000\004\072\141\001\002\000\006\074" +
    "\100\103\101\001\002\000\030\004\042\006\032\007\051" +
    "\014\056\020\064\023\024\024\044\043\027\045\034\052" +
    "\015\104\061\001\002\000\074\004\uffe4\006\uffe4\007\uffe4" +
    "\014\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\075\uffe4\104\uffe4\105\uffe4" +
    "\001\002\000\074\004\uffe8\006\uffe8\007\uffe8\014\uffe8\020" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\075\uffe8\104\uffe8\105\uffe8\001\002\000" +
    "\074\004\uff59\006\uff59\007\uff59\014\uff59\020\uff59\021\uff59" +
    "\023\uff59\024\uff59\026\uff59\030\uff59\031\uff59\032\uff59\033" +
    "\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59" +
    "\043\uff59\044\uff59\045\uff59\047\uff59\052\uff59\053\uff59\054" +
    "\uff59\075\uff59\104\uff59\105\uff59\001\002\000\074\004\uff5a" +
    "\006\uff5a\007\uff5a\014\uff5a\020\uff5a\021\uff5a\023\uff5a\024" +
    "\uff5a\026\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a" +
    "\035\uff5a\036\uff5a\037\uff5a\040\uff5a\041\uff5a\043\uff5a\044" +
    "\uff5a\045\uff5a\047\uff5a\052\uff5a\053\uff5a\054\uff5a\075\uff5a" +
    "\104\uff5a\105\uff5a\001\002\000\074\004\uff5c\006\uff5c\007" +
    "\uff5c\014\uff5c\020\uff5c\021\uff5c\023\uff5c\024\uff5c\026\uff5c" +
    "\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036" +
    "\uff5c\037\uff5c\040\uff5c\041\uff5c\043\uff5c\044\uff5c\045\uff5c" +
    "\047\uff5c\052\uff5c\053\uff5c\054\uff5c\075\uff5c\104\uff5c\105" +
    "\uff5c\001\002\000\074\004\uff5b\006\uff5b\007\uff5b\014\uff5b" +
    "\020\uff5b\021\uff5b\023\uff5b\024\uff5b\026\uff5b\030\uff5b\031" +
    "\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\043\uff5b\044\uff5b\045\uff5b\047\uff5b\052" +
    "\uff5b\053\uff5b\054\uff5b\075\uff5b\104\uff5b\105\uff5b\001\002" +
    "\000\074\004\uff58\006\uff58\007\uff58\014\uff58\020\uff58\021" +
    "\uff58\023\uff58\024\uff58\026\uff58\030\uff58\031\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041" +
    "\uff58\043\uff58\044\uff58\045\uff58\047\uff58\052\uff58\053\uff58" +
    "\054\uff58\075\uff58\104\uff58\105\uff58\001\002\000\064\004" +
    "\042\006\032\007\051\014\056\020\064\021\067\023\024" +
    "\024\044\026\020\030\054\031\040\032\045\033\047\036" +
    "\052\037\066\040\036\041\035\043\027\045\034\047\037" +
    "\052\015\053\025\054\053\104\061\105\070\001\002\000" +
    "\004\074\102\001\002\000\064\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\036\052\037\066\040\036" +
    "\041\035\043\027\045\034\047\037\052\015\053\025\054" +
    "\053\104\061\105\070\001\002\000\066\004\042\006\032" +
    "\007\051\014\056\020\064\021\067\023\024\024\044\026" +
    "\020\030\054\031\040\032\045\033\047\036\052\037\066" +
    "\040\036\041\035\043\027\045\034\047\037\052\015\053" +
    "\025\054\053\075\104\104\061\105\070\001\002\000\004" +
    "\077\134\001\002\000\074\004\uffe7\006\uffe7\007\uffe7\014" +
    "\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\075\uffe7\104\uffe7\105\uffe7\001" +
    "\002\000\074\004\ufffb\006\ufffb\007\ufffb\014\ufffb\020\ufffb" +
    "\021\ufffb\023\ufffb\024\ufffb\026\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\075\ufffb\104\ufffb\105\ufffb\001\002\000\074" +
    "\004\ufff4\006\ufff4\007\ufff4\014\ufff4\020\ufff4\021\ufff4\023" +
    "\ufff4\024\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\075\ufff4\104\ufff4\105\ufff4\001\002\000\074\004\ufff9\006" +
    "\ufff9\007\ufff9\014\ufff9\020\ufff9\021\ufff9\023\ufff9\024\ufff9" +
    "\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\047\ufff9\052\ufff9\053\ufff9\054\ufff9\075\ufff9\104" +
    "\ufff9\105\ufff9\001\002\000\074\004\uffeb\006\uffeb\007\uffeb" +
    "\014\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045\uffeb\047" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\075\uffeb\104\uffeb\105\uffeb" +
    "\001\002\000\074\004\uffe1\006\uffe1\007\uffe1\014\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\024\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\075\uffe1\104\uffe1\105\uffe1\001\002\000" +
    "\074\004\uffdf\006\uffdf\007\uffdf\014\uffdf\020\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\047\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\075\uffdf\104\uffdf\105\uffdf\001\002\000\074\004\uffed" +
    "\006\uffed\007\uffed\014\uffed\020\uffed\021\uffed\023\uffed\024" +
    "\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044" +
    "\uffed\045\uffed\047\uffed\052\uffed\053\uffed\054\uffed\075\uffed" +
    "\104\uffed\105\uffed\001\002\000\074\004\ufff7\006\ufff7\007" +
    "\ufff7\014\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\026\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\052\ufff7\053\ufff7\054\ufff7\075\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\076\004\ufff5\006\ufff5\007\ufff5\014\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\024\ufff5\026\ufff5\027\127\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\075\ufff5\104\ufff5\105\ufff5" +
    "\001\002\000\074\004\uffe0\006\uffe0\007\uffe0\014\uffe0\020" +
    "\uffe0\021\uffe0\023\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\075\uffe0\104\uffe0\105\uffe0\001\002\000" +
    "\074\004\uffde\006\uffde\007\uffde\014\uffde\020\uffde\021\uffde" +
    "\023\uffde\024\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\044\uffde\045\uffde\047\uffde\052\uffde\053\uffde\054" +
    "\uffde\075\uffde\104\uffde\105\uffde\001\002\000\074\004\uffe3" +
    "\006\uffe3\007\uffe3\014\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\047\uffe3\052\uffe3\053\uffe3\054\uffe3\075\uffe3" +
    "\104\uffe3\105\uffe3\001\002\000\074\004\ufffd\006\ufffd\007" +
    "\ufffd\014\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd\026\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\047\ufffd\052\ufffd\053\ufffd\054\ufffd\075\ufffd\104\ufffd\105" +
    "\ufffd\001\002\000\074\004\ufff1\006\ufff1\007\ufff1\014\ufff1" +
    "\020\ufff1\021\ufff1\023\ufff1\024\ufff1\026\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\075\ufff1\104\ufff1\105\ufff1\001\002" +
    "\000\074\004\uffef\006\uffef\007\uffef\014\uffef\020\uffef\021" +
    "\uffef\023\uffef\024\uffef\026\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\043\uffef\044\uffef\045\uffef\047\uffef\052\uffef\053\uffef" +
    "\054\uffef\075\uffef\104\uffef\105\uffef\001\002\000\074\004" +
    "\uffe5\006\uffe5\007\uffe5\014\uffe5\020\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5\075" +
    "\uffe5\104\uffe5\105\uffe5\001\002\000\074\004\uffe9\006\uffe9" +
    "\007\uffe9\014\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\047\uffe9\052\uffe9\053\uffe9\054\uffe9\075\uffe9\104\uffe9" +
    "\105\uffe9\001\002\000\006\026\020\074\130\001\002\000" +
    "\064\004\042\006\032\007\051\014\056\020\064\021\067" +
    "\023\024\024\044\026\020\030\054\031\040\032\045\033" +
    "\047\036\052\037\066\040\036\041\035\043\027\045\034" +
    "\047\037\052\015\053\025\054\053\104\061\105\070\001" +
    "\002\000\074\004\uffa4\006\uffa4\007\uffa4\014\uffa4\020\uffa4" +
    "\021\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\075\uffa4\104\uffa4\105\uffa4\001\002\000\066" +
    "\004\042\006\032\007\051\014\056\020\064\021\067\023" +
    "\024\024\044\026\020\030\054\031\040\032\045\033\047" +
    "\036\052\037\066\040\036\041\035\043\027\045\034\047" +
    "\037\052\015\053\025\054\053\075\133\104\061\105\070" +
    "\001\002\000\074\004\uffa5\006\uffa5\007\uffa5\014\uffa5\020" +
    "\uffa5\021\uffa5\023\uffa5\024\uffa5\026\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\047\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\075\uffa5\104\uffa5\105\uffa5\001\002\000" +
    "\074\004\uff60\006\uff60\007\uff60\014\uff60\020\uff60\021\uff60" +
    "\023\uff60\024\uff60\026\uff60\030\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60" +
    "\043\uff60\044\uff60\045\uff60\047\uff60\052\uff60\053\uff60\054" +
    "\uff60\075\uff60\104\uff60\105\uff60\001\002\000\066\004\042" +
    "\006\032\007\051\014\056\020\064\021\067\023\024\024" +
    "\044\026\020\030\054\031\040\032\045\033\047\036\052" +
    "\037\066\040\036\041\035\043\027\045\034\047\037\052" +
    "\015\053\025\054\053\075\136\104\061\105\070\001\002" +
    "\000\004\103\137\001\002\000\004\077\140\001\002\000" +
    "\074\004\uff5f\006\uff5f\007\uff5f\014\uff5f\020\uff5f\021\uff5f" +
    "\023\uff5f\024\uff5f\026\uff5f\030\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\047\uff5f\052\uff5f\053\uff5f\054" +
    "\uff5f\075\uff5f\104\uff5f\105\uff5f\001\002\000\004\022\142" +
    "\001\002\000\004\056\143\001\002\000\004\103\144\001" +
    "\002\000\004\022\145\001\002\000\004\102\146\001\002" +
    "\000\004\057\147\001\002\000\004\103\150\001\002\000" +
    "\004\073\151\001\002\000\004\077\152\001\002\000\074" +
    "\004\uff6a\006\uff6a\007\uff6a\014\uff6a\020\uff6a\021\uff6a\023" +
    "\uff6a\024\uff6a\026\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a" +
    "\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\043" +
    "\uff6a\044\uff6a\045\uff6a\047\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\075\uff6a\104\uff6a\105\uff6a\001\002\000\074\004\uff62\006" +
    "\uff62\007\uff62\014\uff62\020\uff62\021\uff62\023\uff62\024\uff62" +
    "\026\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62\035" +
    "\uff62\036\uff62\037\uff62\040\uff62\041\uff62\043\uff62\044\uff62" +
    "\045\uff62\047\uff62\052\uff62\053\uff62\054\uff62\075\uff62\104" +
    "\uff62\105\uff62\001\002\000\074\004\uff64\006\uff64\007\uff64" +
    "\014\uff64\020\uff64\021\uff64\023\uff64\024\uff64\026\uff64\030" +
    "\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64" +
    "\037\uff64\040\uff64\041\uff64\043\uff64\044\uff64\045\uff64\047" +
    "\uff64\052\uff64\053\uff64\054\uff64\075\uff64\104\uff64\105\uff64" +
    "\001\002\000\076\004\uffc7\006\uffc7\007\uffc7\014\uffc7\020" +
    "\uffc7\021\uffc7\023\uffc7\024\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\073\uffc7\075\uffc7\104\uffc7\105\uffc7\001" +
    "\002\000\064\004\042\006\032\007\051\014\056\020\064" +
    "\021\067\023\024\024\044\026\020\030\054\031\040\032" +
    "\045\033\047\036\052\037\066\040\036\041\035\043\027" +
    "\045\034\047\037\052\015\053\025\054\053\104\061\105" +
    "\070\001\002\000\066\004\042\006\032\007\051\014\056" +
    "\020\064\021\067\023\024\024\044\026\020\030\054\031" +
    "\040\032\045\033\047\036\052\037\066\040\036\041\035" +
    "\043\027\045\034\047\037\052\015\053\025\054\053\075" +
    "\160\104\061\105\070\001\002\000\004\031\161\001\002" +
    "\000\004\072\162\001\002\000\006\070\164\103\165\001" +
    "\002\000\004\073\176\001\002\000\006\073\uff9c\077\uff9c" +
    "\001\002\000\004\060\166\001\002\000\012\022\170\070" +
    "\171\103\172\106\167\001\002\000\006\073\uff9a\077\uff9a" +
    "\001\002\000\006\022\173\103\174\001\002\000\006\073" +
    "\uff9b\077\uff9b\001\002\000\006\073\uff99\077\uff99\001\002" +
    "\000\006\073\uff98\077\uff98\001\002\000\004\022\175\001" +
    "\002\000\006\073\uff97\077\uff97\001\002\000\004\077\177" +
    "\001\002\000\074\004\uff75\006\uff75\007\uff75\014\uff75\020" +
    "\uff75\021\uff75\023\uff75\024\uff75\026\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\043\uff75\044\uff75\045\uff75\047\uff75\052\uff75" +
    "\053\uff75\054\uff75\075\uff75\104\uff75\105\uff75\001\002\000" +
    "\004\103\201\001\002\000\004\073\202\001\002\000\004" +
    "\077\203\001\002\000\074\004\uff66\006\uff66\007\uff66\014" +
    "\uff66\020\uff66\021\uff66\023\uff66\024\uff66\026\uff66\030\uff66" +
    "\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\037" +
    "\uff66\040\uff66\041\uff66\043\uff66\044\uff66\045\uff66\047\uff66" +
    "\052\uff66\053\uff66\054\uff66\075\uff66\104\uff66\105\uff66\001" +
    "\002\000\006\022\205\103\206\001\002\000\004\103\212" +
    "\001\002\000\004\073\uff6c\001\002\000\004\073\210\001" +
    "\002\000\004\077\211\001\002\000\074\004\uff6d\006\uff6d" +
    "\007\uff6d\014\uff6d\020\uff6d\021\uff6d\023\uff6d\024\uff6d\026" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\047\uff6d\052\uff6d\053\uff6d\054\uff6d\075\uff6d\104\uff6d" +
    "\105\uff6d\001\002\000\004\022\213\001\002\000\004\073" +
    "\uff6b\001\002\000\010\012\215\055\uffac\077\uffac\001\002" +
    "\000\006\050\217\106\216\001\002\000\004\050\220\001" +
    "\002\000\006\055\uffab\077\uffab\001\002\000\006\055\uffaa" +
    "\077\uffaa\001\002\000\024\004\042\007\051\014\056\023" +
    "\024\024\044\043\027\045\034\103\223\106\224\001\002" +
    "\000\004\073\331\001\002\000\004\073\325\001\002\000" +
    "\004\073\225\001\002\000\004\074\226\001\002\000\006" +
    "\034\230\044\227\001\002\000\004\100\321\001\002\000" +
    "\012\010\274\022\272\103\273\106\271\001\002\000\010" +
    "\034\234\044\233\075\232\001\002\000\074\004\uff90\006" +
    "\uff90\007\uff90\014\uff90\020\uff90\021\uff90\023\uff90\024\uff90" +
    "\026\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\043\uff90\044\uff90" +
    "\045\uff90\047\uff90\052\uff90\053\uff90\054\uff90\075\uff90\104" +
    "\uff90\105\uff90\001\002\000\004\100\265\001\002\000\012" +
    "\010\240\022\236\103\237\106\235\001\002\000\004\100" +
    "\261\001\002\000\004\103\253\001\002\000\004\100\247" +
    "\001\002\000\004\103\241\001\002\000\004\010\242\001" +
    "\002\000\004\100\243\001\002\000\064\004\042\006\032" +
    "\007\051\014\056\020\064\021\067\023\024\024\044\026" +
    "\020\030\054\031\040\032\045\033\047\036\052\037\066" +
    "\040\036\041\035\043\027\045\034\047\037\052\015\053" +
    "\025\054\053\104\061\105\070\001\002\000\074\004\042" +
    "\006\032\007\051\014\056\020\064\021\067\023\024\024" +
    "\044\026\020\030\054\031\040\032\045\033\047\034\uff77" +
    "\035\245\036\052\037\066\040\036\041\035\043\027\044" +
    "\uff77\045\034\047\037\052\015\053\025\054\053\075\uff77" +
    "\104\061\105\070\001\002\000\004\077\246\001\002\000" +
    "\010\034\uff7d\044\uff7d\075\uff7d\001\002\000\072\004\042" +
    "\006\032\007\051\014\056\020\064\021\067\023\024\024" +
    "\044\026\020\030\054\031\040\032\045\033\047\034\uff81" +
    "\036\052\037\066\040\036\041\035\043\027\044\uff81\045" +
    "\034\047\037\052\015\053\025\054\053\075\uff81\104\061" +
    "\105\070\001\002\000\074\004\042\006\032\007\051\014" +
    "\056\020\064\021\067\023\024\024\044\026\020\030\054" +
    "\031\040\032\045\033\047\034\uff79\035\251\036\052\037" +
    "\066\040\036\041\035\043\027\044\uff79\045\034\047\037" +
    "\052\015\053\025\054\053\075\uff79\104\061\105\070\001" +
    "\002\000\004\077\252\001\002\000\010\034\uff7f\044\uff7f" +
    "\075\uff7f\001\002\000\004\022\254\001\002\000\004\100" +
    "\255\001\002\000\064\004\042\006\032\007\051\014\056" +
    "\020\064\021\067\023\024\024\044\026\020\030\054\031" +
    "\040\032\045\033\047\036\052\037\066\040\036\041\035" +
    "\043\027\045\034\047\037\052\015\053\025\054\053\104" +
    "\061\105\070\001\002\000\074\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\034\uff78\035\257\036\052" +
    "\037\066\040\036\041\035\043\027\044\uff78\045\034\047" +
    "\037\052\015\053\025\054\053\075\uff78\104\061\105\070" +
    "\001\002\000\004\077\260\001\002\000\010\034\uff7e\044" +
    "\uff7e\075\uff7e\001\002\000\072\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\034\uff82\036\052\037\066" +
    "\040\036\041\035\043\027\044\uff82\045\034\047\037\052" +
    "\015\053\025\054\053\075\uff82\104\061\105\070\001\002" +
    "\000\074\004\042\006\032\007\051\014\056\020\064\021" +
    "\067\023\024\024\044\026\020\030\054\031\040\032\045" +
    "\033\047\034\uff7a\035\263\036\052\037\066\040\036\041" +
    "\035\043\027\044\uff7a\045\034\047\037\052\015\053\025" +
    "\054\053\075\uff7a\104\061\105\070\001\002\000\004\077" +
    "\264\001\002\000\010\034\uff80\044\uff80\075\uff80\001\002" +
    "\000\064\004\042\006\032\007\051\014\056\020\064\021" +
    "\067\023\024\024\044\026\020\030\054\031\040\032\045" +
    "\033\047\036\052\037\066\040\036\041\035\043\027\045" +
    "\034\047\037\052\015\053\025\054\053\104\061\105\070" +
    "\001\002\000\074\004\042\006\032\007\051\014\056\020" +
    "\064\021\067\023\024\024\044\026\020\030\054\031\040" +
    "\032\045\033\047\034\uff7c\035\267\036\052\037\066\040" +
    "\036\041\035\043\027\044\uff7c\045\034\047\037\052\015" +
    "\053\025\054\053\075\uff7c\104\061\105\070\001\002\000" +
    "\004\077\270\001\002\000\010\034\uff7b\044\uff7b\075\uff7b" +
    "\001\002\000\004\100\315\001\002\000\004\103\307\001" +
    "\002\000\004\100\303\001\002\000\004\103\275\001\002" +
    "\000\004\010\276\001\002\000\004\100\277\001\002\000" +
    "\064\004\042\006\032\007\051\014\056\020\064\021\067" +
    "\023\024\024\044\026\020\030\054\031\040\032\045\033" +
    "\047\036\052\037\066\040\036\041\035\043\027\045\034" +
    "\047\037\052\015\053\025\054\053\104\061\105\070\001" +
    "\002\000\074\004\042\006\032\007\051\014\056\020\064" +
    "\021\067\023\024\024\044\026\020\030\054\031\040\032" +
    "\045\033\047\034\uff85\035\301\036\052\037\066\040\036" +
    "\041\035\043\027\044\uff85\045\034\047\037\052\015\053" +
    "\025\054\053\075\uff85\104\061\105\070\001\002\000\004" +
    "\077\302\001\002\000\010\034\uff89\044\uff89\075\uff89\001" +
    "\002\000\072\004\042\006\032\007\051\014\056\020\064" +
    "\021\067\023\024\024\044\026\020\030\054\031\040\032" +
    "\045\033\047\034\uff8d\036\052\037\066\040\036\041\035" +
    "\043\027\044\uff8d\045\034\047\037\052\015\053\025\054" +
    "\053\075\uff8d\104\061\105\070\001\002\000\074\004\042" +
    "\006\032\007\051\014\056\020\064\021\067\023\024\024" +
    "\044\026\020\030\054\031\040\032\045\033\047\034\uff87" +
    "\035\305\036\052\037\066\040\036\041\035\043\027\044" +
    "\uff87\045\034\047\037\052\015\053\025\054\053\075\uff87" +
    "\104\061\105\070\001\002\000\004\077\306\001\002\000" +
    "\010\034\uff8b\044\uff8b\075\uff8b\001\002\000\004\022\310" +
    "\001\002\000\004\100\311\001\002\000\064\004\042\006" +
    "\032\007\051\014\056\020\064\021\067\023\024\024\044" +
    "\026\020\030\054\031\040\032\045\033\047\036\052\037" +
    "\066\040\036\041\035\043\027\045\034\047\037\052\015" +
    "\053\025\054\053\104\061\105\070\001\002\000\074\004" +
    "\042\006\032\007\051\014\056\020\064\021\067\023\024" +
    "\024\044\026\020\030\054\031\040\032\045\033\047\034" +
    "\uff86\035\313\036\052\037\066\040\036\041\035\043\027" +
    "\044\uff86\045\034\047\037\052\015\053\025\054\053\075" +
    "\uff86\104\061\105\070\001\002\000\004\077\314\001\002" +
    "\000\010\034\uff8a\044\uff8a\075\uff8a\001\002\000\072\004" +
    "\042\006\032\007\051\014\056\020\064\021\067\023\024" +
    "\024\044\026\020\030\054\031\040\032\045\033\047\034" +
    "\uff8e\036\052\037\066\040\036\041\035\043\027\044\uff8e" +
    "\045\034\047\037\052\015\053\025\054\053\075\uff8e\104" +
    "\061\105\070\001\002\000\074\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\034\uff88\035\317\036\052" +
    "\037\066\040\036\041\035\043\027\044\uff88\045\034\047" +
    "\037\052\015\053\025\054\053\075\uff88\104\061\105\070" +
    "\001\002\000\004\077\320\001\002\000\010\034\uff8c\044" +
    "\uff8c\075\uff8c\001\002\000\064\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\036\052\037\066\040\036" +
    "\041\035\043\027\045\034\047\037\052\015\053\025\054" +
    "\053\104\061\105\070\001\002\000\074\004\042\006\032" +
    "\007\051\014\056\020\064\021\067\023\024\024\044\026" +
    "\020\030\054\031\040\032\045\033\047\034\uff84\035\323" +
    "\036\052\037\066\040\036\041\035\043\027\044\uff84\045" +
    "\034\047\037\052\015\053\025\054\053\075\uff84\104\061" +
    "\105\070\001\002\000\004\077\324\001\002\000\010\034" +
    "\uff83\044\uff83\075\uff83\001\002\000\004\074\326\001\002" +
    "\000\006\034\230\044\227\001\002\000\010\034\234\044" +
    "\233\075\330\001\002\000\074\004\uff91\006\uff91\007\uff91" +
    "\014\uff91\020\uff91\021\uff91\023\uff91\024\uff91\026\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91\047" +
    "\uff91\052\uff91\053\uff91\054\uff91\075\uff91\104\uff91\105\uff91" +
    "\001\002\000\004\074\332\001\002\000\006\034\230\044" +
    "\227\001\002\000\010\034\234\044\233\075\334\001\002" +
    "\000\074\004\uff8f\006\uff8f\007\uff8f\014\uff8f\020\uff8f\021" +
    "\uff8f\023\uff8f\024\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\075\uff8f\104\uff8f\105\uff8f\001\002\000\006\023" +
    "\337\103\341\001\002\000\004\073\357\001\002\000\004" +
    "\103\341\001\002\000\004\073\uff72\001\002\000\004\055" +
    "\342\001\002\000\004\106\343\001\002\000\004\077\344" +
    "\001\002\000\006\070\164\103\165\001\002\000\004\077" +
    "\346\001\002\000\006\062\350\103\351\001\002\000\004" +
    "\073\uff71\001\002\000\004\103\355\001\002\000\006\061" +
    "\352\062\353\001\002\000\004\106\354\001\002\000\004" +
    "\073\uff6f\001\002\000\004\073\uff70\001\002\000\004\073" +
    "\uff6e\001\002\000\004\073\uff73\001\002\000\004\074\360" +
    "\001\002\000\064\004\042\006\032\007\051\014\056\020" +
    "\064\021\067\023\024\024\044\026\020\030\054\031\040" +
    "\032\045\033\047\036\052\037\066\040\036\041\035\043" +
    "\027\045\034\047\037\052\015\053\025\054\053\104\061" +
    "\105\070\001\002\000\066\004\042\006\032\007\051\014" +
    "\056\020\064\021\067\023\024\024\044\026\020\030\054" +
    "\031\040\032\045\033\047\036\052\037\066\040\036\041" +
    "\035\043\027\045\034\047\037\052\015\053\025\054\053" +
    "\075\362\104\061\105\070\001\002\000\074\004\uff74\006" +
    "\uff74\007\uff74\014\uff74\020\uff74\021\uff74\023\uff74\024\uff74" +
    "\026\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\043\uff74\044\uff74" +
    "\045\uff74\047\uff74\052\uff74\053\uff74\054\uff74\075\uff74\104" +
    "\uff74\105\uff74\001\002\000\006\055\365\077\364\001\002" +
    "\000\076\004\uffcd\006\uffcd\007\uffcd\014\uffcd\020\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\073\uffcd\075\uffcd\104\uffcd\105\uffcd\001\002\000" +
    "\004\022\366\001\002\000\006\022\367\103\370\001\002" +
    "\000\004\077\373\001\002\000\004\022\371\001\002\000" +
    "\004\077\372\001\002\000\076\004\uffcf\006\uffcf\007\uffcf" +
    "\014\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\045\uffcf\047" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\073\uffcf\075\uffcf\104\uffcf" +
    "\105\uffcf\001\002\000\076\004\uffce\006\uffce\007\uffce\014" +
    "\uffce\020\uffce\021\uffce\023\uffce\024\uffce\026\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\043\uffce\044\uffce\045\uffce\047\uffce" +
    "\052\uffce\053\uffce\054\uffce\073\uffce\075\uffce\104\uffce\105" +
    "\uffce\001\002\000\012\055\u0104\061\u0100\062\u0103\077\u0102" +
    "\001\002\000\004\103\376\001\002\000\004\077\377\001" +
    "\002\000\076\004\uffd6\006\uffd6\007\uffd6\014\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\073\uffd6\075\uffd6\104\uffd6\105\uffd6\001\002" +
    "\000\004\106\u010a\001\002\000\004\077\u0109\001\002\000" +
    "\076\004\uffd9\006\uffd9\007\uffd9\014\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\047\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\073\uffd9\075\uffd9\104\uffd9\105\uffd9\001\002\000\004" +
    "\077\uffa7\001\002\000\004\106\u0105\001\002\000\006\077" +
    "\uffa8\101\u0106\001\002\000\004\106\u0107\001\002\000\004" +
    "\077\u0108\001\002\000\076\004\uffd7\006\uffd7\007\uffd7\014" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\073\uffd7\075\uffd7\104\uffd7\105" +
    "\uffd7\001\002\000\076\004\uffd8\006\uffd8\007\uffd8\014\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\073\uffd8\075\uffd8\104\uffd8\105\uffd8" +
    "\001\002\000\006\077\uffa9\101\u010b\001\002\000\004\106" +
    "\u010c\001\002\000\004\077\u010d\001\002\000\076\004\uffd5" +
    "\006\uffd5\007\uffd5\014\uffd5\020\uffd5\021\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\047\uffd5\052\uffd5\053\uffd5\054\uffd5\073\uffd5" +
    "\075\uffd5\104\uffd5\105\uffd5\001\002\000\006\070\164\103" +
    "\165\001\002\000\004\073\u0110\001\002\000\004\074\u0111" +
    "\001\002\000\064\004\042\006\032\007\051\014\056\020" +
    "\064\021\067\023\024\024\044\026\020\030\054\031\040" +
    "\032\045\033\047\036\052\037\066\040\036\041\035\043" +
    "\027\045\034\047\037\052\015\053\025\054\053\104\061" +
    "\105\070\001\002\000\066\004\042\006\032\007\051\014" +
    "\056\020\064\021\067\023\024\024\044\026\020\030\054" +
    "\031\040\032\045\033\047\036\052\037\066\040\036\041" +
    "\035\043\027\045\034\047\037\052\015\053\025\054\053" +
    "\075\u0113\104\061\105\070\001\002\000\074\004\uff76\006" +
    "\uff76\007\uff76\014\uff76\020\uff76\021\uff76\023\uff76\024\uff76" +
    "\026\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035" +
    "\uff76\036\uff76\037\uff76\040\uff76\041\uff76\043\uff76\044\uff76" +
    "\045\uff76\047\uff76\052\uff76\053\uff76\054\uff76\075\uff76\104" +
    "\uff76\105\uff76\001\002\000\004\077\u013b\001\002\000\034" +
    "\013\u011d\042\u0125\056\u0126\064\u011a\066\u0122\072\u011e\073" +
    "\u011c\077\u011f\100\u0121\101\u011b\102\u0120\103\u0123\106\u0124" +
    "\001\002\000\004\077\u0137\001\002\000\006\060\166\077" +
    "\u0136\001\002\000\034\013\u011d\042\u0125\056\u0126\064\u011a" +
    "\066\u0122\072\u011e\073\u011c\077\u011f\100\u0121\101\u011b\102" +
    "\u0120\103\u0123\106\u0124\001\002\000\036\010\u012f\013\u012a" +
    "\042\u0133\056\u0134\064\u0127\066\u0130\072\u012b\073\u0129\077" +
    "\u012d\100\u012e\101\u0128\102\u012c\103\u0131\106\u0132\001\002" +
    "\000\042\010\uffbe\013\uffbe\022\uffbe\042\uffbe\056\uffbe\064" +
    "\uffbe\066\uffbe\072\uffbe\073\uffbe\075\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\106\uffbe\001\002\000\042\010" +
    "\uffc2\013\uffc2\022\uffc2\042\uffc2\056\uffc2\064\uffc2\066\uffc2" +
    "\072\uffc2\073\uffc2\075\uffc2\077\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\106\uffc2\001\002\000\042\010\uffba\013\uffba" +
    "\022\uffba\042\uffba\056\uffba\064\uffba\066\uffba\072\uffba\073" +
    "\uffba\075\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\106\uffba\001\002\000\042\010\uffbd\013\uffbd\022\uffbd\042" +
    "\uffbd\056\uffbd\064\uffbd\066\uffbd\072\uffbd\073\uffbd\075\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\106\uffbd\001" +
    "\002\000\042\010\uffbb\013\uffbb\022\uffbb\042\uffbb\056\uffbb" +
    "\064\uffbb\066\uffbb\072\uffbb\073\uffbb\075\uffbb\077\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\106\uffbb\001\002\000\042" +
    "\010\uffc1\013\uffc1\022\uffc1\042\uffc1\056\uffc1\064\uffc1\066" +
    "\uffc1\072\uffc1\073\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\106\uffc1\001\002\000\042\010\uffc3\013" +
    "\uffc3\022\uffc3\042\uffc3\056\uffc3\064\uffc3\066\uffc3\072\uffc3" +
    "\073\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\106\uffc3\001\002\000\042\010\uffc4\013\uffc4\022\uffc4" +
    "\042\uffc4\056\uffc4\064\uffc4\066\uffc4\072\uffc4\073\uffc4\075" +
    "\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\106\uffc4" +
    "\001\002\000\042\010\uffbf\013\uffbf\022\uffbf\042\uffbf\056" +
    "\uffbf\064\uffbf\066\uffbf\072\uffbf\073\uffbf\075\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\106\uffbf\001\002\000" +
    "\042\010\uffc6\013\uffc6\022\uffc6\042\uffc6\056\uffc6\064\uffc6" +
    "\066\uffc6\072\uffc6\073\uffc6\075\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\106\uffc6\001\002\000\042\010\uffc5" +
    "\013\uffc5\022\uffc5\042\uffc5\056\uffc5\064\uffc5\066\uffc5\072" +
    "\uffc5\073\uffc5\075\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\106\uffc5\001\002\000\042\010\uffc0\013\uffc0\022" +
    "\uffc0\042\uffc0\056\uffc0\064\uffc0\066\uffc0\072\uffc0\073\uffc0" +
    "\075\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\106" +
    "\uffc0\001\002\000\042\010\uffbc\013\uffbc\022\uffbc\042\uffbc" +
    "\056\uffbc\064\uffbc\066\uffbc\072\uffbc\073\uffbc\075\uffbc\077" +
    "\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\106\uffbc\001\002" +
    "\000\042\010\uffb1\013\uffb1\022\uffb1\042\uffb1\056\uffb1\064" +
    "\uffb1\066\uffb1\072\uffb1\073\uffb1\075\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\106\uffb1\001\002\000\042\010" +
    "\uffb5\013\uffb5\022\uffb5\042\uffb5\056\uffb5\064\uffb5\066\uffb5" +
    "\072\uffb5\073\uffb5\075\uffb5\077\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\106\uffb5\001\002\000\042\010\uffad\013\uffad" +
    "\022\uffad\042\uffad\056\uffad\064\uffad\066\uffad\072\uffad\073" +
    "\uffad\075\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\106\uffad\001\002\000\042\010\uffb0\013\uffb0\022\uffb0\042" +
    "\uffb0\056\uffb0\064\uffb0\066\uffb0\072\uffb0\073\uffb0\075\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\106\uffb0\001" +
    "\002\000\042\010\uffae\013\uffae\022\uffae\042\uffae\056\uffae" +
    "\064\uffae\066\uffae\072\uffae\073\uffae\075\uffae\077\uffae\100" +
    "\uffae\101\uffae\102\uffae\103\uffae\106\uffae\001\002\000\042" +
    "\010\uffb6\013\uffb6\022\uffb6\042\uffb6\056\uffb6\064\uffb6\066" +
    "\uffb6\072\uffb6\073\uffb6\075\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\103\uffb6\106\uffb6\001\002\000\042\010\uffb4\013" +
    "\uffb4\022\uffb4\042\uffb4\056\uffb4\064\uffb4\066\uffb4\072\uffb4" +
    "\073\uffb4\075\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\106\uffb4\001\002\000\042\010\uffb7\013\uffb7\022\uffb7" +
    "\042\uffb7\056\uffb7\064\uffb7\066\uffb7\072\uffb7\073\uffb7\075" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\106\uffb7" +
    "\001\002\000\004\077\u0135\001\002\000\042\010\uffb2\013" +
    "\uffb2\022\uffb2\042\uffb2\056\uffb2\064\uffb2\066\uffb2\072\uffb2" +
    "\073\uffb2\075\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\106\uffb2\001\002\000\042\010\uffb9\013\uffb9\022\uffb9" +
    "\042\uffb9\056\uffb9\064\uffb9\066\uffb9\072\uffb9\073\uffb9\075" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\106\uffb9" +
    "\001\002\000\042\010\uffb8\013\uffb8\022\uffb8\042\uffb8\056" +
    "\uffb8\064\uffb8\066\uffb8\072\uffb8\073\uffb8\075\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\106\uffb8\001\002\000" +
    "\042\010\uffb3\013\uffb3\022\uffb3\042\uffb3\056\uffb3\064\uffb3" +
    "\066\uffb3\072\uffb3\073\uffb3\075\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\106\uffb3\001\002\000\042\010\uffaf" +
    "\013\uffaf\022\uffaf\042\uffaf\056\uffaf\064\uffaf\066\uffaf\072" +
    "\uffaf\073\uffaf\075\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\106\uffaf\001\002\000\074\004\uff9e\006\uff9e\007" +
    "\uff9e\014\uff9e\020\uff9e\021\uff9e\023\uff9e\024\uff9e\026\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\047\uff9e\052\uff9e\053\uff9e\054\uff9e\075\uff9e\104\uff9e\105" +
    "\uff9e\001\002\000\074\004\uffa1\006\uffa1\007\uffa1\014\uffa1" +
    "\020\uffa1\021\uffa1\023\uffa1\024\uffa1\026\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1\047\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\075\uffa1\104\uffa1\105\uffa1\001\002" +
    "\000\074\004\uff9d\006\uff9d\007\uff9d\014\uff9d\020\uff9d\021" +
    "\uff9d\023\uff9d\024\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\075\uff9d\104\uff9d\105\uff9d\001\002\000\036\013" +
    "\u012a\022\u0139\042\u0133\056\u0134\064\u0127\066\u0130\072\u012b" +
    "\073\u0129\077\u012d\100\u012e\101\u0128\102\u012c\103\u0131\106" +
    "\u0132\001\002\000\004\077\u013a\001\002\000\074\004\uff9f" +
    "\006\uff9f\007\uff9f\014\uff9f\020\uff9f\021\uff9f\023\uff9f\024" +
    "\uff9f\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\047\uff9f\052\uff9f\053\uff9f\054\uff9f\075\uff9f" +
    "\104\uff9f\105\uff9f\001\002\000\074\004\uffa0\006\uffa0\007" +
    "\uffa0\014\uffa0\020\uffa0\021\uffa0\023\uffa0\024\uffa0\026\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\047\uffa0\052\uffa0\053\uffa0\054\uffa0\075\uffa0\104\uffa0\105" +
    "\uffa0\001\002\000\004\103\u013d\001\002\000\004\073\u013e" +
    "\001\002\000\004\077\u013f\001\002\000\074\004\uff68\006" +
    "\uff68\007\uff68\014\uff68\020\uff68\021\uff68\023\uff68\024\uff68" +
    "\026\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035" +
    "\uff68\036\uff68\037\uff68\040\uff68\041\uff68\043\uff68\044\uff68" +
    "\045\uff68\047\uff68\052\uff68\053\uff68\054\uff68\075\uff68\104" +
    "\uff68\105\uff68\001\002\000\004\103\u0141\001\002\000\004" +
    "\102\u0142\001\002\000\004\103\u0143\001\002\000\004\102" +
    "\u0144\001\002\000\004\103\u0145\001\002\000\004\073\u0146" +
    "\001\002\000\004\077\u0147\001\002\000\074\004\uff69\006" +
    "\uff69\007\uff69\014\uff69\020\uff69\021\uff69\023\uff69\024\uff69" +
    "\026\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\043\uff69\044\uff69" +
    "\045\uff69\047\uff69\052\uff69\053\uff69\054\uff69\075\uff69\104" +
    "\uff69\105\uff69\001\002\000\004\074\u0149\001\002\000\064" +
    "\004\042\006\032\007\051\014\056\020\064\021\067\023" +
    "\024\024\044\026\020\030\054\031\040\032\045\033\047" +
    "\036\052\037\066\040\036\041\035\043\027\045\034\047" +
    "\037\052\015\053\025\054\053\104\061\105\070\001\002" +
    "\000\066\004\042\006\032\007\051\014\056\020\064\021" +
    "\067\023\024\024\044\026\020\030\054\031\040\032\045" +
    "\033\047\036\052\037\066\040\036\041\035\043\027\045" +
    "\034\047\037\052\015\053\025\054\053\075\u014b\104\061" +
    "\105\070\001\002\000\004\103\u014c\001\002\000\006\055" +
    "\u014e\102\u014d\001\002\000\004\064\u0153\001\002\000\004" +
    "\074\u014f\001\002\000\004\106\u0150\001\002\000\004\075" +
    "\u0151\001\002\000\004\077\u0152\001\002\000\076\004\uff5e" +
    "\006\uff5e\007\uff5e\014\uff5e\020\uff5e\021\uff5e\023\uff5e\024" +
    "\uff5e\026\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e" +
    "\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\043\uff5e\044" +
    "\uff5e\045\uff5e\047\uff5e\052\uff5e\053\uff5e\054\uff5e\073\uff5e" +
    "\075\uff5e\104\uff5e\105\uff5e\001\002\000\004\103\u0154\001" +
    "\002\000\004\055\u0155\001\002\000\004\057\u0156\001\002" +
    "\000\004\103\u0157\001\002\000\004\077\u0158\001\002\000" +
    "\076\004\uff5d\006\uff5d\007\uff5d\014\uff5d\020\uff5d\021\uff5d" +
    "\023\uff5d\024\uff5d\026\uff5d\030\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\047\uff5d\052\uff5d\053\uff5d\054" +
    "\uff5d\073\uff5d\075\uff5d\104\uff5d\105\uff5d\001\002\000\074" +
    "\004\uff63\006\uff63\007\uff63\014\uff63\020\uff63\021\uff63\023" +
    "\uff63\024\uff63\026\uff63\030\uff63\031\uff63\032\uff63\033\uff63" +
    "\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63\043" +
    "\uff63\044\uff63\045\uff63\047\uff63\052\uff63\053\uff63\054\uff63" +
    "\075\uff63\104\uff63\105\uff63\001\002\000\004\074\u015b\001" +
    "\002\000\034\013\u011d\042\u0125\056\u0126\064\u011a\066\u0122" +
    "\072\u011e\073\u011c\077\u011f\100\u0121\101\u011b\102\u0120\103" +
    "\u0123\106\u0124\001\002\000\036\013\u012a\042\u0133\056\u0134" +
    "\064\u0127\066\u0130\072\u012b\073\u0129\075\u015d\077\u012d\100" +
    "\u012e\101\u0128\102\u012c\103\u0131\106\u0132\001\002\000\004" +
    "\077\u015e\001\002\000\076\004\uff61\006\uff61\007\uff61\014" +
    "\uff61\020\uff61\021\uff61\023\uff61\024\uff61\026\uff61\030\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\040\uff61\041\uff61\043\uff61\044\uff61\045\uff61\047\uff61" +
    "\052\uff61\053\uff61\054\uff61\073\uff61\075\uff61\104\uff61\105" +
    "\uff61\001\002\000\004\022\u0160\001\002\000\004\103\u0161" +
    "\001\002\000\004\022\u0162\001\002\000\004\073\u0163\001" +
    "\002\000\004\077\u0164\001\002\000\074\004\uff67\006\uff67" +
    "\007\uff67\014\uff67\020\uff67\021\uff67\023\uff67\024\uff67\026" +
    "\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045" +
    "\uff67\047\uff67\052\uff67\053\uff67\054\uff67\075\uff67\104\uff67" +
    "\105\uff67\001\002\000\004\103\u0174\001\002\000\012\055" +
    "\u016a\061\u0167\062\u0103\077\u0169\001\002\000\004\106\u0170" +
    "\001\002\000\004\077\u016f\001\002\000\076\004\uffd4\006" +
    "\uffd4\007\uffd4\014\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\047\uffd4\052\uffd4\053\uffd4\054\uffd4\073\uffd4\075" +
    "\uffd4\104\uffd4\105\uffd4\001\002\000\004\106\u016b\001\002" +
    "\000\006\077\uffa8\101\u016c\001\002\000\004\106\u016d\001" +
    "\002\000\004\077\u016e\001\002\000\076\004\uffd2\006\uffd2" +
    "\007\uffd2\014\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\047\uffd2\052\uffd2\053\uffd2\054\uffd2\073\uffd2\075\uffd2" +
    "\104\uffd2\105\uffd2\001\002\000\076\004\uffd3\006\uffd3\007" +
    "\uffd3\014\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\047\uffd3\052\uffd3\053\uffd3\054\uffd3\073\uffd3\075\uffd3\104" +
    "\uffd3\105\uffd3\001\002\000\006\077\uffa9\101\u0171\001\002" +
    "\000\004\106\u0172\001\002\000\004\077\u0173\001\002\000" +
    "\076\004\uffd0\006\uffd0\007\uffd0\014\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\047\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\073\uffd0\075\uffd0\104\uffd0\105\uffd0\001\002\000\004" +
    "\077\u0175\001\002\000\076\004\uffd1\006\uffd1\007\uffd1\014" +
    "\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\026\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\073\uffd1\075\uffd1\104\uffd1\105" +
    "\uffd1\001\002\000\004\002\000\001\002\000\006\070\164" +
    "\103\165\001\002\000\004\073\u0179\001\002\000\004\074" +
    "\u017a\001\002\000\066\004\042\006\032\007\051\014\056" +
    "\020\064\021\067\023\024\024\044\026\020\030\054\031" +
    "\040\032\045\033\047\036\052\037\066\040\036\041\035" +
    "\043\027\045\034\047\037\052\015\053\025\054\053\075" +
    "\u017b\104\061\105\070\001\002\000\076\004\uffa2\006\uffa2" +
    "\007\uffa2\014\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\047\uffa2\052\uffa2\053\uffa2\054\uffa2\075\uffa2" +
    "\104\uffa2\105\uffa2\001\002\000\066\004\042\006\032\007" +
    "\051\014\056\020\064\021\067\023\024\024\044\026\020" +
    "\030\054\031\040\032\045\033\047\036\052\037\066\040" +
    "\036\041\035\043\027\045\034\047\037\052\015\053\025" +
    "\054\053\075\u017d\104\061\105\070\001\002\000\076\004" +
    "\uffa3\006\uffa3\007\uffa3\014\uffa3\020\uffa3\021\uffa3\023\uffa3" +
    "\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\047\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\075\uffa3\104\uffa3\105\uffa3\001\002\000\076\004\uffca" +
    "\006\uffca\007\uffca\014\uffca\020\uffca\021\uffca\023\uffca\024" +
    "\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044" +
    "\uffca\045\uffca\047\uffca\052\uffca\053\uffca\054\uffca\073\uffca" +
    "\075\uffca\104\uffca\105\uffca\001\002\000\004\022\u0180\001" +
    "\002\000\036\013\u011d\022\u0182\042\u0125\056\u0126\064\u011a" +
    "\066\u0122\072\u011e\073\u011c\077\u011f\100\u0121\101\u011b\102" +
    "\u0120\103\u0123\106\u0124\001\002\000\036\013\u012a\022\u0184" +
    "\042\u0133\056\u0134\064\u0127\066\u0130\072\u012b\073\u0129\077" +
    "\u012d\100\u012e\101\u0128\102\u012c\103\u0131\106\u0132\001\002" +
    "\000\004\077\u0183\001\002\000\076\004\uffcb\006\uffcb\007" +
    "\uffcb\014\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\052\uffcb\053\uffcb\054\uffcb\073\uffcb\075\uffcb\104" +
    "\uffcb\105\uffcb\001\002\000\004\077\u0185\001\002\000\076" +
    "\004\uffcc\006\uffcc\007\uffcc\014\uffcc\020\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\047\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\073\uffcc\075\uffcc\104\uffcc\105\uffcc\001\002\000\074\004" +
    "\uff65\006\uff65\007\uff65\014\uff65\020\uff65\021\uff65\023\uff65" +
    "\024\uff65\026\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\043\uff65" +
    "\044\uff65\045\uff65\047\uff65\052\uff65\053\uff65\054\uff65\075" +
    "\uff65\104\uff65\105\uff65\001\002\000\004\002\001\001\002" +
    "\000\004\073\u0189\001\002\000\004\074\u018a\001\002\000" +
    "\064\004\042\006\032\007\051\014\056\020\064\021\067" +
    "\023\024\024\044\026\020\030\054\031\040\032\045\033" +
    "\047\036\052\037\066\040\036\041\035\043\027\045\034" +
    "\047\037\052\015\053\025\054\053\104\061\105\070\001" +
    "\002\000\066\004\042\006\032\007\051\014\056\020\064" +
    "\021\067\023\024\024\044\026\020\030\054\031\040\032" +
    "\045\033\047\036\052\037\066\040\036\041\035\043\027" +
    "\045\034\047\037\052\015\053\025\054\053\075\u018c\104" +
    "\061\105\070\001\002\000\004\002\ufffe\001\002\000\004" +
    "\072\u018e\001\002\000\004\073\u018f\001\002\000\004\074" +
    "\u0190\001\002\000\064\004\042\006\032\007\051\014\056" +
    "\020\064\021\067\023\024\024\044\026\020\030\054\031" +
    "\040\032\045\033\047\036\052\037\066\040\036\041\035" +
    "\043\027\045\034\047\037\052\015\053\025\054\053\104" +
    "\061\105\070\001\002\000\066\004\042\006\032\007\051" +
    "\014\056\020\064\021\067\023\024\024\044\026\020\030" +
    "\054\031\040\032\045\033\047\036\052\037\066\040\036" +
    "\041\035\043\027\045\034\047\037\052\015\053\025\054" +
    "\053\075\u0192\104\061\105\070\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\021\005\040\006\056\010\042\011\061\012\070\013\064" +
    "\014\032\015\025\020\071\026\015\032\027\033\045\034" +
    "\030\035\047\036\054\041\022\042\013\043\020\045\016" +
    "\046\062\047\057\001\001\000\002\001\001\000\012\006" +
    "\u0185\045\016\046\062\047\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\005\114\006\121\010\115\011\122\012\124\013\123" +
    "\014\113\015\110\020\125\026\105\032\111\033\116\034" +
    "\112\035\117\036\120\041\107\042\104\043\106\045\016" +
    "\046\062\047\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u0158\045" +
    "\016\046\062\047\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\153\045\016\046" +
    "\062\047\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\152\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\072\006\074\026\076\035\075\041\073\045\016\046" +
    "\062\047\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\134\005\040" +
    "\006\056\010\042\011\061\012\070\013\064\014\032\015" +
    "\025\020\071\026\015\032\027\033\045\034\030\035\047" +
    "\036\054\041\022\042\013\043\020\045\016\046\062\047" +
    "\057\001\001\000\002\001\001\000\056\003\102\005\040" +
    "\006\056\010\042\011\061\012\070\013\064\014\032\015" +
    "\025\020\071\026\015\032\027\033\045\034\030\035\047" +
    "\036\054\041\022\042\013\043\020\045\016\046\062\047" +
    "\057\001\001\000\054\005\114\006\121\010\115\011\122" +
    "\012\124\013\123\014\113\015\110\020\125\026\105\032" +
    "\111\033\116\034\112\035\117\036\120\041\107\042\104" +
    "\043\106\045\016\046\062\047\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\130\001" +
    "\001\000\056\003\131\005\040\006\056\010\042\011\061" +
    "\012\070\013\064\014\032\015\025\020\071\026\015\032" +
    "\027\033\045\034\030\035\047\036\054\041\022\042\013" +
    "\043\020\045\016\046\062\047\057\001\001\000\002\001" +
    "\001\000\054\005\114\006\121\010\115\011\122\012\124" +
    "\013\123\014\113\015\110\020\125\026\105\032\111\033" +
    "\116\034\112\035\117\036\120\041\107\042\104\043\106" +
    "\045\016\046\062\047\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\005\114\006\121\010\115\011\122" +
    "\012\124\013\123\014\113\015\110\020\125\026\105\032" +
    "\111\033\116\034\112\035\117\036\120\041\107\042\104" +
    "\043\106\045\016\046\062\047\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\156" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\221\045\016\046\062" +
    "\047\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\243" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\247\005\040" +
    "\006\056\010\042\011\061\012\070\013\064\014\032\015" +
    "\025\020\071\026\015\032\027\033\045\034\030\035\047" +
    "\036\054\041\022\042\013\043\020\045\016\046\062\047" +
    "\057\001\001\000\054\005\114\006\121\010\115\011\122" +
    "\012\124\013\123\014\113\015\110\020\125\026\105\032" +
    "\111\033\116\034\112\035\117\036\120\041\107\042\104" +
    "\043\106\045\016\046\062\047\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\255\005\040\006\056\010\042\011\061\012" +
    "\070\013\064\014\032\015\025\020\071\026\015\032\027" +
    "\033\045\034\030\035\047\036\054\041\022\042\013\043" +
    "\020\045\016\046\062\047\057\001\001\000\054\005\114" +
    "\006\121\010\115\011\122\012\124\013\123\014\113\015" +
    "\110\020\125\026\105\032\111\033\116\034\112\035\117" +
    "\036\120\041\107\042\104\043\106\045\016\046\062\047" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\261\005\040\006\056\010\042\011\061\012\070\013" +
    "\064\014\032\015\025\020\071\026\015\032\027\033\045" +
    "\034\030\035\047\036\054\041\022\042\013\043\020\045" +
    "\016\046\062\047\057\001\001\000\054\005\114\006\121" +
    "\010\115\011\122\012\124\013\123\014\113\015\110\020" +
    "\125\026\105\032\111\033\116\034\112\035\117\036\120" +
    "\041\107\042\104\043\106\045\016\046\062\047\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\265" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\277\005\040\006\056" +
    "\010\042\011\061\012\070\013\064\014\032\015\025\020" +
    "\071\026\015\032\027\033\045\034\030\035\047\036\054" +
    "\041\022\042\013\043\020\045\016\046\062\047\057\001" +
    "\001\000\054\005\114\006\121\010\115\011\122\012\124" +
    "\013\123\014\113\015\110\020\125\026\105\032\111\033" +
    "\116\034\112\035\117\036\120\041\107\042\104\043\106" +
    "\045\016\046\062\047\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\303\005\040\006\056\010\042" +
    "\011\061\012\070\013\064\014\032\015\025\020\071\026" +
    "\015\032\027\033\045\034\030\035\047\036\054\041\022" +
    "\042\013\043\020\045\016\046\062\047\057\001\001\000" +
    "\054\005\114\006\121\010\115\011\122\012\124\013\123" +
    "\014\113\015\110\020\125\026\105\032\111\033\116\034" +
    "\112\035\117\036\120\041\107\042\104\043\106\045\016" +
    "\046\062\047\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\311" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\315\005\040" +
    "\006\056\010\042\011\061\012\070\013\064\014\032\015" +
    "\025\020\071\026\015\032\027\033\045\034\030\035\047" +
    "\036\054\041\022\042\013\043\020\045\016\046\062\047" +
    "\057\001\001\000\054\005\114\006\121\010\115\011\122" +
    "\012\124\013\123\014\113\015\110\020\125\026\105\032" +
    "\111\033\116\034\112\035\117\036\120\041\107\042\104" +
    "\043\106\045\016\046\062\047\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\321\005\040\006\056" +
    "\010\042\011\061\012\070\013\064\014\032\015\025\020" +
    "\071\026\015\032\027\033\045\034\030\035\047\036\054" +
    "\041\022\042\013\043\020\045\016\046\062\047\057\001" +
    "\001\000\054\005\114\006\121\010\115\011\122\012\124" +
    "\013\123\014\113\015\110\020\125\026\105\032\111\033" +
    "\116\034\112\035\117\036\120\041\107\042\104\043\106" +
    "\045\016\046\062\047\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\335\030\337\001\001\000\002\001\001\000" +
    "\004\030\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\344\001" +
    "\001\000\002\001\001\000\004\007\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\360\005" +
    "\040\006\056\010\042\011\061\012\070\013\064\014\032" +
    "\015\025\020\071\026\015\032\027\033\045\034\030\035" +
    "\047\036\054\041\022\042\013\043\020\045\016\046\062" +
    "\047\057\001\001\000\054\005\114\006\121\010\115\011" +
    "\122\012\124\013\123\014\113\015\110\020\125\026\105" +
    "\032\111\033\116\034\112\035\117\036\120\041\107\042" +
    "\104\043\106\045\016\046\062\047\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0111" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\u0149\005\040\006\056\010\042\011\061\012\070\013" +
    "\064\014\032\015\025\020\071\026\015\032\027\033\045" +
    "\034\030\035\047\036\054\041\022\042\013\043\020\045" +
    "\016\046\062\047\057\001\001\000\054\005\114\006\121" +
    "\010\115\011\122\012\124\013\123\014\113\015\110\020" +
    "\125\026\105\032\111\033\116\034\112\035\117\036\120" +
    "\041\107\042\104\043\106\045\016\046\062\047\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0177\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\u017b\005\040\006\056\010\042\011\061\012" +
    "\070\013\064\014\032\015\025\020\071\026\015\032\027" +
    "\033\045\034\030\035\047\036\054\041\022\042\013\043" +
    "\020\045\016\046\062\047\057\001\001\000\002\001\001" +
    "\000\054\005\114\006\121\010\115\011\122\012\124\013" +
    "\123\014\113\015\110\020\125\026\105\032\111\033\116" +
    "\034\112\035\117\036\120\041\107\042\104\043\106\045" +
    "\016\046\062\047\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\u0180\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u018a" +
    "\005\040\006\056\010\042\011\061\012\070\013\064\014" +
    "\032\015\025\020\071\026\015\032\027\033\045\034\030" +
    "\035\047\036\054\041\022\042\013\043\020\045\016\046" +
    "\062\047\057\001\001\000\054\005\114\006\121\010\115" +
    "\011\122\012\124\013\123\014\113\015\110\020\125\026" +
    "\105\032\111\033\116\034\112\035\117\036\120\041\107" +
    "\042\104\043\106\045\016\046\062\047\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u0190\005\040\006\056\010\042\011" +
    "\061\012\070\013\064\014\032\015\025\020\071\026\015" +
    "\032\027\033\045\034\030\035\047\036\054\041\022\042" +
    "\013\043\020\045\016\046\062\047\057\001\001\000\054" +
    "\005\114\006\121\010\115\011\122\012\124\013\123\014" +
    "\113\015\110\020\125\026\105\032\111\033\116\034\112" +
    "\035\117\036\120\041\107\042\104\043\106\045\016\046" +
    "\062\047\057\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VARIABLE ::= Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VARIABLE ::= Short 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VARIABLE ::= Long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VARIABLE ::= Goto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VARIABLE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LIBRERIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LIBRERIA ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_INCLUDE ::= Comillas LIBRERIA Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_INCLUDE ::= Op_relacional LIBRERIA Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INCLUDE ::= Numeral Include SENTENCIA_INCLUDE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DEFINE ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TYPE_DEF ::= Typedef CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TYPE_DEF ::= Typedef EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TYPE_DEF ::= Typedef REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TYPE_DEF ::= Typedef UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TYPE_DEF ::= Typedef DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // UNION ::= Union Identificador Llave_a SENTENCIA Llave_c Identificador Coma Multiplicacion Identificador Igual Op_logico Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNION",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // UNION ::= Union Identificador Llave_a SENTENCIA Llave_c Identificador Igual Llave_a Numero Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNION",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // STRUCT ::= Struct Llave_a SENTENCIA Llave_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ENUM ::= Enum Identificador Llave_a CADENA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENUM",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONST ::= Const DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXTERN ::= Extern DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXTERN",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // REGISTER ::= Register DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("REGISTER",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // UNSIGNED ::= Unsigned DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SIZEOF ::= SizeOf Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SIZEOF",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SYSTEM ::= Sistema Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SYSTEM",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LEER_T ::= Gets Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LEER_T ::= Fgets Parentesis_a Identificador Coma Identificador Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LEER_T ::= Scan Parentesis_a Comillas Modulo Identificador Comillas Coma Op_logico Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO_PRINT ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO_PRINT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PRINT ::= Print Parentesis_a TIPO_PRINT Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPO_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_FOR ::= TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_FOR ::= T_datoN TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASE ::= CASE Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASE ::= CASE Case Comillas Identificador Comillas Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE ::= CASE Case Identificador Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE ::= CASE Case Numero Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASE ::= CASE Default Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE ::= CASE Default Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE ::= CASE Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE ::= CASE Case Comillas Identificador Comillas Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE ::= CASE Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE ::= CASE Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE ::= CASE Case Identificador Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= CASE Case Numero Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE ::= Default Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE ::= Default Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE ::= Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE ::= Case Comillas Identificador Comillas Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE ::= Case Identificador Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE ::= Case Numero Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE ::= Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= Case Comillas Identificador Comillas Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE ::= Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASE ::= Case Identificador Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASE ::= Case Numero Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SWITCH ::= Switch Parentesis_a DECLARACION Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SWITCH ::= Switch Parentesis_a Numero Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO_SENTENCIA_B ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO_SENTENCIA_B ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO_SENTENCIA_B ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO_SENTENCIA_B ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO_SENTENCIA_B ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_RETORNO ::= Return SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_RETORNO ::= Return Comillas_S CADENA Comillas_S P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_RETORNO ::= Return Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_RETORNO ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_RETORNO ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELSE ::= IF Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO_DECLARACION_C ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_C",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_DECLARACION_N ::= Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_DECLARACION_N ::= Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO_DECLARACION_N ::= Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CHAR ::= Char Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CHAR ::= Char Identificador Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CHAR ::= Char Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CADENA ::= CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CADENA ::= CADENA Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CADENA ::= CADENA Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CADENA ::= CADENA Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CADENA ::= CADENA Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CADENA ::= CADENA Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CADENA ::= CADENA Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CADENA ::= CADENA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CADENA ::= CADENA Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CADENA ::= CADENA Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CADENA ::= CADENA Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CADENA ::= CADENA Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CADENA ::= CADENA Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CADENA ::= Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CADENA ::= Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CADENA ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CADENA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CADENA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CADENA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CADENA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CADENA ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CADENA ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CADENA ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENA ::= Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CADENA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= UNION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= ENUM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= CHAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= CHAR Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= CHAR Igual Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_datoN Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_datoN Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_datoN Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_datoN Identificador TIPO_DECLARACION_N P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_datoN Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Int Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Int Identificador TIPO_DECLARACION_N P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= TYPE_DEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA TYPE_DEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Vacio Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

