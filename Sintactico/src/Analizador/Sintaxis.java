
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 01 20:57:43 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 01 20:57:43 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\303\000\002\002\004\000\002\002\003\000\002\002" +
    "\007\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\005\000\002\006\006\000" +
    "\002\006\011\000\002\006\006\000\002\006\011\000\002" +
    "\006\005\000\002\006\006\000\002\006\011\000\002\006" +
    "\006\000\002\006\011\000\002\006\011\000\002\006\010" +
    "\000\002\006\005\000\002\006\010\000\002\006\007\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\004\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\045\004\000\002\046\004\000\002\046" +
    "\006\000\002\046\007\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\025\004\000\002\011\007\000" +
    "\002\011\005\000\002\010\011\000\002\010\010\000\002" +
    "\043\005\000\002\043\005\000\002\043\007\000\002\043" +
    "\007\000\002\043\005\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\006\000" +
    "\002\016\007\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\004\000\002\027\005\000\002\036" +
    "\011\000\002\036\011\000\002\036\011\000\002\037\005" +
    "\000\002\037\005\000\002\037\010\000\002\037\010\000" +
    "\002\037\012\000\002\037\012\000\002\037\006\000\002" +
    "\037\006\000\002\037\010\000\002\037\010\000\002\037" +
    "\005\000\002\037\007\000\002\037\006\000\002\037\006" +
    "\000\002\037\011\000\002\037\011\000\002\037\013\000" +
    "\002\037\013\000\002\037\006\000\002\037\010\000\002" +
    "\037\007\000\002\037\007\000\002\037\011\000\002\037" +
    "\011\000\002\013\011\000\002\014\013\000\002\015\011" +
    "\000\002\017\004\000\002\017\003\000\002\030\011\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\020\007\000\002\031\003\000\002\031\004\000\002\031" +
    "\005\000\002\031\007\000\002\031\011\000\002\031\007" +
    "\000\002\032\013\000\002\032\007\000\002\032\014\000" +
    "\002\032\013\000\002\032\007\000\002\033\011\000\002" +
    "\034\007\000\002\035\004\000\002\041\004\000\002\005" +
    "\004\000\002\026\004\000\002\047\010\000\002\012\010" +
    "\000\002\012\010\000\002\050\015\000\002\050\017\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\040\006\000\002\021" +
    "\006\000\002\022\005\000\002\022\005\000\002\023\010" +
    "\000\002\023\012\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bf\000\014\004\012\011\004\071\007\076\010\107" +
    "\005\001\002\000\004\076\u01bc\001\002\000\004\110\u01b8" +
    "\001\002\000\004\002\000\001\002\000\004\025\u01af\001" +
    "\002\000\004\072\u01aa\001\002\000\004\002\u01a9\001\002" +
    "\000\004\076\013\001\002\000\004\072\014\001\002\000" +
    "\004\073\015\001\002\000\004\074\016\001\002\000\066" +
    "\004\045\006\035\007\054\014\061\020\066\021\073\023" +
    "\027\024\047\026\023\030\056\031\043\032\050\033\052" +
    "\036\055\037\071\040\041\041\040\043\032\045\037\047" +
    "\042\052\021\053\031\054\057\103\072\104\064\105\074" +
    "\001\002\000\076\004\uffe4\006\uffe4\007\uffe4\014\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\026\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\075\uffe4\103\uffe4\104\uffe4\105\uffe4\001" +
    "\002\000\076\004\ufff8\006\ufff8\007\ufff8\014\ufff8\020\ufff8" +
    "\021\ufff8\023\ufff8\024\ufff8\026\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\043\ufff8\044\ufff8\045\ufff8\047\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\075\ufff8\103\ufff8\104\ufff8\105\ufff8\001\002" +
    "\000\022\004\045\007\054\014\061\023\027\024\047\043" +
    "\032\045\037\103\072\001\002\000\006\055\u01a1\077\u01a0" +
    "\001\002\000\004\072\u0199\001\002\000\076\004\ufff1\006" +
    "\ufff1\007\ufff1\014\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1" +
    "\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1\075\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\001\002\000\070\004\045\006\035" +
    "\007\054\014\061\020\066\021\073\023\027\024\047\026" +
    "\023\030\056\031\043\032\050\033\052\036\055\037\071" +
    "\040\041\041\040\043\032\045\037\047\042\052\021\053" +
    "\031\054\057\075\u0198\103\072\104\064\105\074\001\002" +
    "\000\076\004\ufff6\006\ufff6\007\ufff6\014\ufff6\020\ufff6\021" +
    "\ufff6\023\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\075\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002\000" +
    "\006\062\u0188\103\u0187\001\002\000\076\004\uffe8\006\uffe8" +
    "\007\uffe8\014\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\047\uffe8\052\uffe8\053\uffe8\054\uffe8\075\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\001\002\000\004\072\u0181\001\002\000" +
    "\004\103\u017c\001\002\000\076\004\uffdb\006\uffdb\007\uffdb" +
    "\014\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\026\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\047" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\075\uffdb\103\uffdb\104\uffdb" +
    "\105\uffdb\001\002\000\076\004\uffd9\006\uffd9\007\uffd9\014" +
    "\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\075\uffd9\103\uffd9\104\uffd9\105" +
    "\uffd9\001\002\000\022\004\045\007\054\014\061\023\027" +
    "\024\047\043\032\045\037\103\072\001\002\000\076\004" +
    "\uffea\006\uffea\007\uffea\014\uffea\020\uffea\021\uffea\023\uffea" +
    "\024\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea" +
    "\044\uffea\045\uffea\047\uffea\052\uffea\053\uffea\054\uffea\075" +
    "\uffea\103\uffea\104\uffea\105\uffea\001\002\000\004\103\u016a" +
    "\001\002\000\004\072\u0162\001\002\000\004\072\u015e\001" +
    "\002\000\014\010\u0154\022\u0151\070\251\103\u0153\106\u0150" +
    "\001\002\000\004\072\u014a\001\002\000\076\004\ufff4\006" +
    "\ufff4\007\ufff4\014\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4" +
    "\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\075\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\001\002\000\006\062\u0139\103\u0138" +
    "\001\002\000\100\004\ufff0\006\ufff0\007\ufff0\014\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\024\ufff0\026\ufff0\027\133\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\047\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\075\ufff0\103\ufff0\104\ufff0\105" +
    "\ufff0\001\002\000\004\103\u012f\001\002\000\004\072\u0119" +
    "\001\002\000\076\004\uffda\006\uffda\007\uffda\014\uffda\020" +
    "\uffda\021\uffda\023\uffda\024\uffda\026\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\043\uffda\044\uffda\045\uffda\047\uffda\052\uffda" +
    "\053\uffda\054\uffda\075\uffda\103\uffda\104\uffda\105\uffda\001" +
    "\002\000\004\072\315\001\002\000\076\004\uffd8\006\uffd8" +
    "\007\uffd8\014\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\047\uffd8\052\uffd8\053\uffd8\054\uffd8\075\uffd8\103\uffd8" +
    "\104\uffd8\105\uffd8\001\002\000\004\103\310\001\002\000" +
    "\004\072\265\001\002\000\004\074\243\001\002\000\004" +
    "\072\237\001\002\000\076\004\uffe0\006\uffe0\007\uffe0\014" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\075\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\001\002\000\004\077\236\001\002\000\076\004\ufffa" +
    "\006\ufffa\007\ufffa\014\ufffa\020\ufffa\021\ufffa\023\ufffa\024" +
    "\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\047\ufffa\052\ufffa\053\ufffa\054\ufffa\075\ufffa" +
    "\103\ufffa\104\ufffa\105\ufffa\001\002\000\100\004\uffc2\006" +
    "\uffc2\007\uffc2\014\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2" +
    "\026\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\052\uffc2\053\uffc2\054\uffc2\073\uffc2\075" +
    "\uffc2\103\uffc2\104\uffc2\105\uffc2\001\002\000\022\004\045" +
    "\007\054\014\061\023\027\024\047\043\032\045\037\103" +
    "\072\001\002\000\076\004\uffee\006\uffee\007\uffee\014\uffee" +
    "\020\uffee\021\uffee\023\uffee\024\uffee\026\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\043\uffee\044\uffee\045\uffee\047\uffee\052" +
    "\uffee\053\uffee\054\uffee\075\uffee\103\uffee\104\uffee\105\uffee" +
    "\001\002\000\022\004\045\007\054\014\061\023\027\024" +
    "\047\043\032\045\037\103\072\001\002\000\100\004\uffc3" +
    "\006\uffc3\007\uffc3\014\uffc3\020\uffc3\021\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\047\uffc3\052\uffc3\053\uffc3\054\uffc3\073\uffc3" +
    "\075\uffc3\103\uffc3\104\uffc3\105\uffc3\001\002\000\076\004" +
    "\uffec\006\uffec\007\uffec\014\uffec\020\uffec\021\uffec\023\uffec" +
    "\024\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043\uffec" +
    "\044\uffec\045\uffec\047\uffec\052\uffec\053\uffec\054\uffec\075" +
    "\uffec\103\uffec\104\uffec\105\uffec\001\002\000\004\072\163" +
    "\001\002\000\004\055\145\001\002\000\006\074\104\103" +
    "\105\001\002\000\032\004\045\006\035\007\054\014\061" +
    "\020\066\023\027\024\047\043\032\045\037\052\021\103" +
    "\072\104\064\001\002\000\076\004\uffe2\006\uffe2\007\uffe2" +
    "\014\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\047" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\075\uffe2\103\uffe2\104\uffe2" +
    "\105\uffe2\001\002\000\076\004\uffe6\006\uffe6\007\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\075\uffe6\103\uffe6\104\uffe6\105" +
    "\uffe6\001\002\000\076\004\uff4c\006\uff4c\007\uff4c\014\uff4c" +
    "\020\uff4c\021\uff4c\023\uff4c\024\uff4c\026\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c" +
    "\040\uff4c\041\uff4c\043\uff4c\044\uff4c\045\uff4c\047\uff4c\052" +
    "\uff4c\053\uff4c\054\uff4c\075\uff4c\103\uff4c\104\uff4c\105\uff4c" +
    "\001\002\000\076\004\uff4d\006\uff4d\007\uff4d\014\uff4d\020" +
    "\uff4d\021\uff4d\023\uff4d\024\uff4d\026\uff4d\030\uff4d\031\uff4d" +
    "\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d\037\uff4d\040" +
    "\uff4d\041\uff4d\043\uff4d\044\uff4d\045\uff4d\047\uff4d\052\uff4d" +
    "\053\uff4d\054\uff4d\075\uff4d\103\uff4d\104\uff4d\105\uff4d\001" +
    "\002\000\076\004\uff4f\006\uff4f\007\uff4f\014\uff4f\020\uff4f" +
    "\021\uff4f\023\uff4f\024\uff4f\026\uff4f\030\uff4f\031\uff4f\032" +
    "\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f" +
    "\041\uff4f\043\uff4f\044\uff4f\045\uff4f\047\uff4f\052\uff4f\053" +
    "\uff4f\054\uff4f\075\uff4f\103\uff4f\104\uff4f\105\uff4f\001\002" +
    "\000\076\004\uff4e\006\uff4e\007\uff4e\014\uff4e\020\uff4e\021" +
    "\uff4e\023\uff4e\024\uff4e\026\uff4e\030\uff4e\031\uff4e\032\uff4e" +
    "\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041" +
    "\uff4e\043\uff4e\044\uff4e\045\uff4e\047\uff4e\052\uff4e\053\uff4e" +
    "\054\uff4e\075\uff4e\103\uff4e\104\uff4e\105\uff4e\001\002\000" +
    "\076\004\uff4b\006\uff4b\007\uff4b\014\uff4b\020\uff4b\021\uff4b" +
    "\023\uff4b\024\uff4b\026\uff4b\030\uff4b\031\uff4b\032\uff4b\033" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\047\uff4b\052\uff4b\053\uff4b\054" +
    "\uff4b\075\uff4b\103\uff4b\104\uff4b\105\uff4b\001\002\000\066" +
    "\004\045\006\035\007\054\014\061\020\066\021\073\023" +
    "\027\024\047\026\023\030\056\031\043\032\050\033\052" +
    "\036\055\037\071\040\041\041\040\043\032\045\037\047" +
    "\042\052\021\053\031\054\057\103\072\104\064\105\074" +
    "\001\002\000\004\074\106\001\002\000\066\004\045\006" +
    "\035\007\054\014\061\020\066\021\073\023\027\024\047" +
    "\026\023\030\056\031\043\032\050\033\052\036\055\037" +
    "\071\040\041\041\040\043\032\045\037\047\042\052\021" +
    "\053\031\054\057\103\072\104\064\105\074\001\002\000" +
    "\070\004\045\006\035\007\054\014\061\020\066\021\073" +
    "\023\027\024\047\026\023\030\056\031\043\032\050\033" +
    "\052\036\055\037\071\040\041\041\040\043\032\045\037" +
    "\047\042\052\021\053\031\054\057\075\110\103\072\104" +
    "\064\105\074\001\002\000\004\077\140\001\002\000\076" +
    "\004\uffe5\006\uffe5\007\uffe5\014\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\075\uffe5\103\uffe5\104\uffe5\105\uffe5\001\002\000\076\004" +
    "\ufff9\006\ufff9\007\ufff9\014\ufff9\020\ufff9\021\ufff9\023\ufff9" +
    "\024\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\047\ufff9\052\ufff9\053\ufff9\054\ufff9\075" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\076\004\ufff2" +
    "\006\ufff2\007\ufff2\014\ufff2\020\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\047\ufff2\052\ufff2\053\ufff2\054\ufff2\075\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\001\002\000\076\004\ufff7\006" +
    "\ufff7\007\ufff7\014\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7" +
    "\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\047\ufff7\052\ufff7\053\ufff7\054\ufff7\075\ufff7\103" +
    "\ufff7\104\ufff7\105\ufff7\001\002\000\076\004\uffe9\006\uffe9" +
    "\007\uffe9\014\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\047\uffe9\052\uffe9\053\uffe9\054\uffe9\075\uffe9\103\uffe9" +
    "\104\uffe9\105\uffe9\001\002\000\076\004\uffdf\006\uffdf\007" +
    "\uffdf\014\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\047\uffdf\052\uffdf\053\uffdf\054\uffdf\075\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\001\002\000\076\004\uffdd\006\uffdd\007\uffdd" +
    "\014\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\075\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\001\002\000\076\004\uffeb\006\uffeb\007\uffeb\014" +
    "\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\075\uffeb\103\uffeb\104\uffeb\105" +
    "\uffeb\001\002\000\076\004\ufff5\006\ufff5\007\ufff5\014\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\024\ufff5\026\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\075\ufff5\103\ufff5\104\ufff5\105\ufff5" +
    "\001\002\000\100\004\ufff3\006\ufff3\007\ufff3\014\ufff3\020" +
    "\ufff3\021\ufff3\023\ufff3\024\ufff3\026\ufff3\027\133\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3\045\ufff3\047\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\075\ufff3\103\ufff3\104\ufff3\105" +
    "\ufff3\001\002\000\076\004\uffde\006\uffde\007\uffde\014\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\026\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde\047\uffde\052" +
    "\uffde\053\uffde\054\uffde\075\uffde\103\uffde\104\uffde\105\uffde" +
    "\001\002\000\076\004\uffdc\006\uffdc\007\uffdc\014\uffdc\020" +
    "\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\075\uffdc\103\uffdc\104\uffdc\105\uffdc\001" +
    "\002\000\076\004\uffe1\006\uffe1\007\uffe1\014\uffe1\020\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\026\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\075\uffe1\103\uffe1\104\uffe1\105\uffe1\001\002" +
    "\000\076\004\ufffb\006\ufffb\007\ufffb\014\ufffb\020\ufffb\021" +
    "\ufffb\023\ufffb\024\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\075\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002\000" +
    "\076\004\uffef\006\uffef\007\uffef\014\uffef\020\uffef\021\uffef" +
    "\023\uffef\024\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\043\uffef\044\uffef\045\uffef\047\uffef\052\uffef\053\uffef\054" +
    "\uffef\075\uffef\103\uffef\104\uffef\105\uffef\001\002\000\076" +
    "\004\uffed\006\uffed\007\uffed\014\uffed\020\uffed\021\uffed\023" +
    "\uffed\024\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043" +
    "\uffed\044\uffed\045\uffed\047\uffed\052\uffed\053\uffed\054\uffed" +
    "\075\uffed\103\uffed\104\uffed\105\uffed\001\002\000\076\004" +
    "\uffe3\006\uffe3\007\uffe3\014\uffe3\020\uffe3\021\uffe3\023\uffe3" +
    "\024\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\052\uffe3\053\uffe3\054\uffe3\075" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\001\002\000\076\004\uffe7" +
    "\006\uffe7\007\uffe7\014\uffe7\020\uffe7\021\uffe7\023\uffe7\024" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\052\uffe7\053\uffe7\054\uffe7\075\uffe7" +
    "\103\uffe7\104\uffe7\105\uffe7\001\002\000\006\026\023\074" +
    "\134\001\002\000\066\004\045\006\035\007\054\014\061" +
    "\020\066\021\073\023\027\024\047\026\023\030\056\031" +
    "\043\032\050\033\052\036\055\037\071\040\041\041\040" +
    "\043\032\045\037\047\042\052\021\053\031\054\057\103" +
    "\072\104\064\105\074\001\002\000\076\004\uff9d\006\uff9d" +
    "\007\uff9d\014\uff9d\020\uff9d\021\uff9d\023\uff9d\024\uff9d\026" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\047\uff9d\052\uff9d\053\uff9d\054\uff9d\075\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\001\002\000\070\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\075\137\103\072\104\064\105\074\001\002\000" +
    "\076\004\uff9e\006\uff9e\007\uff9e\014\uff9e\020\uff9e\021\uff9e" +
    "\023\uff9e\024\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\047\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\075\uff9e\103\uff9e\104\uff9e\105\uff9e\001\002\000\076" +
    "\004\uff53\006\uff53\007\uff53\014\uff53\020\uff53\021\uff53\023" +
    "\uff53\024\uff53\026\uff53\030\uff53\031\uff53\032\uff53\033\uff53" +
    "\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\043" +
    "\uff53\044\uff53\045\uff53\047\uff53\052\uff53\053\uff53\054\uff53" +
    "\075\uff53\103\uff53\104\uff53\105\uff53\001\002\000\070\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\036" +
    "\055\037\071\040\041\041\040\043\032\045\037\047\042" +
    "\052\021\053\031\054\057\075\142\103\072\104\064\105" +
    "\074\001\002\000\004\103\143\001\002\000\004\077\144" +
    "\001\002\000\076\004\uff52\006\uff52\007\uff52\014\uff52\020" +
    "\uff52\021\uff52\023\uff52\024\uff52\026\uff52\030\uff52\031\uff52" +
    "\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040" +
    "\uff52\041\uff52\043\uff52\044\uff52\045\uff52\047\uff52\052\uff52" +
    "\053\uff52\054\uff52\075\uff52\103\uff52\104\uff52\105\uff52\001" +
    "\002\000\004\103\146\001\002\000\012\013\147\042\150" +
    "\064\152\066\151\001\002\000\004\103\161\001\002\000" +
    "\004\103\157\001\002\000\004\103\155\001\002\000\004" +
    "\103\153\001\002\000\004\077\154\001\002\000\100\004" +
    "\uffd5\006\uffd5\007\uffd5\014\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\047\uffd5\052\uffd5\053\uffd5\054\uffd5\073" +
    "\uffd5\075\uffd5\103\uffd5\104\uffd5\105\uffd5\001\002\000\004" +
    "\077\156\001\002\000\100\004\uffd7\006\uffd7\007\uffd7\014" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\073\uffd7\075\uffd7\103\uffd7\104" +
    "\uffd7\105\uffd7\001\002\000\004\077\160\001\002\000\100" +
    "\004\uffd6\006\uffd6\007\uffd6\014\uffd6\020\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\047\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\073\uffd6\075\uffd6\103\uffd6\104\uffd6\105\uffd6\001\002\000" +
    "\004\077\162\001\002\000\100\004\uffd4\006\uffd4\007\uffd4" +
    "\014\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\073\uffd4\075\uffd4\103\uffd4" +
    "\104\uffd4\105\uffd4\001\002\000\006\022\164\103\165\001" +
    "\002\000\034\013\174\042\204\056\205\064\171\066\201" +
    "\072\175\073\173\077\176\100\200\101\172\102\177\103" +
    "\202\106\203\001\002\000\004\073\166\001\002\000\004" +
    "\077\167\001\002\000\076\004\uff5e\006\uff5e\007\uff5e\014" +
    "\uff5e\020\uff5e\021\uff5e\023\uff5e\024\uff5e\026\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\043\uff5e\044\uff5e\045\uff5e\047\uff5e" +
    "\052\uff5e\053\uff5e\054\uff5e\075\uff5e\103\uff5e\104\uff5e\105" +
    "\uff5e\001\002\000\036\013\211\022\223\042\221\056\222" +
    "\064\206\066\216\072\212\073\210\077\214\100\215\101" +
    "\207\102\213\103\217\106\220\001\002\000\044\010\uffb8" +
    "\013\uffb8\022\uffb8\042\uffb8\051\uffb8\056\uffb8\064\uffb8\066" +
    "\uffb8\072\uffb8\073\uffb8\075\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\106\uffb8\001\002\000\044\010\uffbc\013" +
    "\uffbc\022\uffbc\042\uffbc\051\uffbc\056\uffbc\064\uffbc\066\uffbc" +
    "\072\uffbc\073\uffbc\075\uffbc\077\uffbc\100\uffbc\101\uffbc\102" +
    "\uffbc\103\uffbc\106\uffbc\001\002\000\044\010\uffb4\013\uffb4" +
    "\022\uffb4\042\uffb4\051\uffb4\056\uffb4\064\uffb4\066\uffb4\072" +
    "\uffb4\073\uffb4\075\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\103\uffb4\106\uffb4\001\002\000\044\010\uffb7\013\uffb7\022" +
    "\uffb7\042\uffb7\051\uffb7\056\uffb7\064\uffb7\066\uffb7\072\uffb7" +
    "\073\uffb7\075\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103" +
    "\uffb7\106\uffb7\001\002\000\044\010\uffb5\013\uffb5\022\uffb5" +
    "\042\uffb5\051\uffb5\056\uffb5\064\uffb5\066\uffb5\072\uffb5\073" +
    "\uffb5\075\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\106\uffb5\001\002\000\044\010\uffbb\013\uffbb\022\uffbb\042" +
    "\uffbb\051\uffbb\056\uffbb\064\uffbb\066\uffbb\072\uffbb\073\uffbb" +
    "\075\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\106" +
    "\uffbb\001\002\000\044\010\uffbd\013\uffbd\022\uffbd\042\uffbd" +
    "\051\uffbd\056\uffbd\064\uffbd\066\uffbd\072\uffbd\073\uffbd\075" +
    "\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\106\uffbd" +
    "\001\002\000\044\010\uffbe\013\uffbe\022\uffbe\042\uffbe\051" +
    "\uffbe\056\uffbe\064\uffbe\066\uffbe\072\uffbe\073\uffbe\075\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\106\uffbe\001" +
    "\002\000\044\010\uffb9\013\uffb9\022\uffb9\042\uffb9\051\uffb9" +
    "\056\uffb9\064\uffb9\066\uffb9\072\uffb9\073\uffb9\075\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\106\uffb9\001\002" +
    "\000\044\010\uffc0\013\uffc0\022\uffc0\042\uffc0\051\uffc0\056" +
    "\uffc0\064\uffc0\066\uffc0\072\uffc0\073\uffc0\075\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\106\uffc0\001\002\000" +
    "\044\010\uffbf\013\uffbf\022\uffbf\042\uffbf\051\uffbf\056\uffbf" +
    "\064\uffbf\066\uffbf\072\uffbf\073\uffbf\075\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\106\uffbf\001\002\000\044" +
    "\010\uffba\013\uffba\022\uffba\042\uffba\051\uffba\056\uffba\064" +
    "\uffba\066\uffba\072\uffba\073\uffba\075\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\106\uffba\001\002\000\044\010" +
    "\uffb6\013\uffb6\022\uffb6\042\uffb6\051\uffb6\056\uffb6\064\uffb6" +
    "\066\uffb6\072\uffb6\073\uffb6\075\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\106\uffb6\001\002\000\044\010\uffab" +
    "\013\uffab\022\uffab\042\uffab\051\uffab\056\uffab\064\uffab\066" +
    "\uffab\072\uffab\073\uffab\075\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\106\uffab\001\002\000\044\010\uffaf\013" +
    "\uffaf\022\uffaf\042\uffaf\051\uffaf\056\uffaf\064\uffaf\066\uffaf" +
    "\072\uffaf\073\uffaf\075\uffaf\077\uffaf\100\uffaf\101\uffaf\102" +
    "\uffaf\103\uffaf\106\uffaf\001\002\000\044\010\uffa7\013\uffa7" +
    "\022\uffa7\042\uffa7\051\uffa7\056\uffa7\064\uffa7\066\uffa7\072" +
    "\uffa7\073\uffa7\075\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\106\uffa7\001\002\000\044\010\uffaa\013\uffaa\022" +
    "\uffaa\042\uffaa\051\uffaa\056\uffaa\064\uffaa\066\uffaa\072\uffaa" +
    "\073\uffaa\075\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\106\uffaa\001\002\000\044\010\uffa8\013\uffa8\022\uffa8" +
    "\042\uffa8\051\uffa8\056\uffa8\064\uffa8\066\uffa8\072\uffa8\073" +
    "\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\106\uffa8\001\002\000\044\010\uffb0\013\uffb0\022\uffb0\042" +
    "\uffb0\051\uffb0\056\uffb0\064\uffb0\066\uffb0\072\uffb0\073\uffb0" +
    "\075\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\106" +
    "\uffb0\001\002\000\044\010\uffae\013\uffae\022\uffae\042\uffae" +
    "\051\uffae\056\uffae\064\uffae\066\uffae\072\uffae\073\uffae\075" +
    "\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\106\uffae" +
    "\001\002\000\044\010\uffb1\013\uffb1\022\uffb1\042\uffb1\051" +
    "\uffb1\056\uffb1\064\uffb1\066\uffb1\072\uffb1\073\uffb1\075\uffb1" +
    "\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\106\uffb1\001" +
    "\002\000\044\010\uffac\013\uffac\022\uffac\042\uffac\051\uffac" +
    "\056\uffac\064\uffac\066\uffac\072\uffac\073\uffac\075\uffac\077" +
    "\uffac\100\uffac\101\uffac\102\uffac\103\uffac\106\uffac\001\002" +
    "\000\044\010\uffb3\013\uffb3\022\uffb3\042\uffb3\051\uffb3\056" +
    "\uffb3\064\uffb3\066\uffb3\072\uffb3\073\uffb3\075\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\106\uffb3\001\002\000" +
    "\044\010\uffb2\013\uffb2\022\uffb2\042\uffb2\051\uffb2\056\uffb2" +
    "\064\uffb2\066\uffb2\072\uffb2\073\uffb2\075\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\106\uffb2\001\002\000\044" +
    "\010\uffad\013\uffad\022\uffad\042\uffad\051\uffad\056\uffad\064" +
    "\uffad\066\uffad\072\uffad\073\uffad\075\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\106\uffad\001\002\000\044\010" +
    "\uffa9\013\uffa9\022\uffa9\042\uffa9\051\uffa9\056\uffa9\064\uffa9" +
    "\066\uffa9\072\uffa9\073\uffa9\075\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\106\uffa9\001\002\000\004\102\224" +
    "\001\002\000\006\057\225\103\226\001\002\000\004\103" +
    "\231\001\002\000\004\073\227\001\002\000\004\077\230" +
    "\001\002\000\076\004\uff5f\006\uff5f\007\uff5f\014\uff5f\020" +
    "\uff5f\021\uff5f\023\uff5f\024\uff5f\026\uff5f\030\uff5f\031\uff5f" +
    "\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040" +
    "\uff5f\041\uff5f\043\uff5f\044\uff5f\045\uff5f\047\uff5f\052\uff5f" +
    "\053\uff5f\054\uff5f\075\uff5f\103\uff5f\104\uff5f\105\uff5f\001" +
    "\002\000\004\073\232\001\002\000\004\077\233\001\002" +
    "\000\076\004\uff5d\006\uff5d\007\uff5d\014\uff5d\020\uff5d\021" +
    "\uff5d\023\uff5d\024\uff5d\026\uff5d\030\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041" +
    "\uff5d\043\uff5d\044\uff5d\045\uff5d\047\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\075\uff5d\103\uff5d\104\uff5d\105\uff5d\001\002\000" +
    "\076\004\uff55\006\uff55\007\uff55\014\uff55\020\uff55\021\uff55" +
    "\023\uff55\024\uff55\026\uff55\030\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55" +
    "\043\uff55\044\uff55\045\uff55\047\uff55\052\uff55\053\uff55\054" +
    "\uff55\075\uff55\103\uff55\104\uff55\105\uff55\001\002\000\076" +
    "\004\uff57\006\uff57\007\uff57\014\uff57\020\uff57\021\uff57\023" +
    "\uff57\024\uff57\026\uff57\030\uff57\031\uff57\032\uff57\033\uff57" +
    "\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041\uff57\043" +
    "\uff57\044\uff57\045\uff57\047\uff57\052\uff57\053\uff57\054\uff57" +
    "\075\uff57\103\uff57\104\uff57\105\uff57\001\002\000\100\004" +
    "\uffc1\006\uffc1\007\uffc1\014\uffc1\020\uffc1\021\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\047\uffc1\052\uffc1\053\uffc1\054\uffc1\073" +
    "\uffc1\075\uffc1\103\uffc1\104\uffc1\105\uffc1\001\002\000\004" +
    "\103\240\001\002\000\004\073\241\001\002\000\004\077" +
    "\242\001\002\000\076\004\uff59\006\uff59\007\uff59\014\uff59" +
    "\020\uff59\021\uff59\023\uff59\024\uff59\026\uff59\030\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59" +
    "\040\uff59\041\uff59\043\uff59\044\uff59\045\uff59\047\uff59\052" +
    "\uff59\053\uff59\054\uff59\075\uff59\103\uff59\104\uff59\105\uff59" +
    "\001\002\000\066\004\045\006\035\007\054\014\061\020" +
    "\066\021\073\023\027\024\047\026\023\030\056\031\043" +
    "\032\050\033\052\036\055\037\071\040\041\041\040\043" +
    "\032\045\037\047\042\052\021\053\031\054\057\103\072" +
    "\104\064\105\074\001\002\000\070\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\075\245\103\072\104\064\105\074\001\002\000" +
    "\004\031\246\001\002\000\004\072\247\001\002\000\006" +
    "\070\251\103\252\001\002\000\004\073\263\001\002\000" +
    "\006\073\uff95\077\uff95\001\002\000\004\060\253\001\002" +
    "\000\012\022\255\070\256\103\257\106\254\001\002\000" +
    "\006\073\uff93\077\uff93\001\002\000\006\022\260\103\261" +
    "\001\002\000\006\073\uff94\077\uff94\001\002\000\006\073" +
    "\uff92\077\uff92\001\002\000\006\073\uff91\077\uff91\001\002" +
    "\000\004\022\262\001\002\000\006\073\uff90\077\uff90\001" +
    "\002\000\004\077\264\001\002\000\076\004\uff6e\006\uff6e" +
    "\007\uff6e\014\uff6e\020\uff6e\021\uff6e\023\uff6e\024\uff6e\026" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e" +
    "\036\uff6e\037\uff6e\040\uff6e\041\uff6e\043\uff6e\044\uff6e\045" +
    "\uff6e\047\uff6e\052\uff6e\053\uff6e\054\uff6e\075\uff6e\103\uff6e" +
    "\104\uff6e\105\uff6e\001\002\000\010\022\266\056\267\103" +
    "\270\001\002\000\036\013\174\042\204\051\276\056\205" +
    "\064\171\066\201\072\175\073\173\077\176\100\200\101" +
    "\172\102\177\103\202\106\203\001\002\000\004\103\274" +
    "\001\002\000\004\073\uff65\001\002\000\004\073\272\001" +
    "\002\000\004\077\273\001\002\000\076\004\uff66\006\uff66" +
    "\007\uff66\014\uff66\020\uff66\021\uff66\023\uff66\024\uff66\026" +
    "\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\041\uff66\043\uff66\044\uff66\045" +
    "\uff66\047\uff66\052\uff66\053\uff66\054\uff66\075\uff66\103\uff66" +
    "\104\uff66\105\uff66\001\002\000\004\073\uff64\001\002\000" +
    "\040\013\211\022\305\042\221\051\304\056\222\064\206" +
    "\066\216\072\212\073\210\077\214\100\215\101\207\102" +
    "\213\103\217\106\220\001\002\000\004\103\277\001\002" +
    "\000\034\013\174\042\204\056\205\064\171\066\201\072" +
    "\175\073\173\077\176\100\200\101\172\102\177\103\202" +
    "\106\203\001\002\000\036\013\211\022\301\042\221\056" +
    "\222\064\206\066\216\072\212\073\210\077\214\100\215" +
    "\101\207\102\213\103\217\106\220\001\002\000\006\073" +
    "\uff62\102\302\001\002\000\004\103\303\001\002\000\004" +
    "\073\uff61\001\002\000\004\103\306\001\002\000\004\073" +
    "\uff63\001\002\000\004\022\307\001\002\000\004\073\uff60" +
    "\001\002\000\010\012\311\055\uffa5\077\uffa5\001\002\000" +
    "\006\050\313\106\312\001\002\000\004\050\314\001\002" +
    "\000\006\055\uffa4\077\uffa4\001\002\000\006\055\uffa3\077" +
    "\uffa3\001\002\000\024\004\045\007\054\014\061\023\027" +
    "\024\047\043\032\045\037\103\317\106\320\001\002\000" +
    "\004\073\u0115\001\002\000\006\055\145\073\u0111\001\002" +
    "\000\004\073\321\001\002\000\004\074\322\001\002\000" +
    "\006\034\324\044\323\001\002\000\004\100\u010d\001\002" +
    "\000\012\010\370\022\366\103\367\106\365\001\002\000" +
    "\010\034\330\044\327\075\326\001\002\000\076\004\uff89" +
    "\006\uff89\007\uff89\014\uff89\020\uff89\021\uff89\023\uff89\024" +
    "\uff89\026\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\043\uff89\044" +
    "\uff89\045\uff89\047\uff89\052\uff89\053\uff89\054\uff89\075\uff89" +
    "\103\uff89\104\uff89\105\uff89\001\002\000\004\100\361\001" +
    "\002\000\012\010\334\022\332\103\333\106\331\001\002" +
    "\000\004\100\355\001\002\000\004\103\347\001\002\000" +
    "\004\100\343\001\002\000\004\103\335\001\002\000\004" +
    "\010\336\001\002\000\004\100\337\001\002\000\066\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\036" +
    "\055\037\071\040\041\041\040\043\032\045\037\047\042" +
    "\052\021\053\031\054\057\103\072\104\064\105\074\001" +
    "\002\000\076\004\045\006\035\007\054\014\061\020\066" +
    "\021\073\023\027\024\047\026\023\030\056\031\043\032" +
    "\050\033\052\034\uff70\035\341\036\055\037\071\040\041" +
    "\041\040\043\032\044\uff70\045\037\047\042\052\021\053" +
    "\031\054\057\075\uff70\103\072\104\064\105\074\001\002" +
    "\000\004\077\342\001\002\000\010\034\uff76\044\uff76\075" +
    "\uff76\001\002\000\074\004\045\006\035\007\054\014\061" +
    "\020\066\021\073\023\027\024\047\026\023\030\056\031" +
    "\043\032\050\033\052\034\uff7a\036\055\037\071\040\041" +
    "\041\040\043\032\044\uff7a\045\037\047\042\052\021\053" +
    "\031\054\057\075\uff7a\103\072\104\064\105\074\001\002" +
    "\000\076\004\045\006\035\007\054\014\061\020\066\021" +
    "\073\023\027\024\047\026\023\030\056\031\043\032\050" +
    "\033\052\034\uff72\035\345\036\055\037\071\040\041\041" +
    "\040\043\032\044\uff72\045\037\047\042\052\021\053\031" +
    "\054\057\075\uff72\103\072\104\064\105\074\001\002\000" +
    "\004\077\346\001\002\000\010\034\uff78\044\uff78\075\uff78" +
    "\001\002\000\004\022\350\001\002\000\004\100\351\001" +
    "\002\000\066\004\045\006\035\007\054\014\061\020\066" +
    "\021\073\023\027\024\047\026\023\030\056\031\043\032" +
    "\050\033\052\036\055\037\071\040\041\041\040\043\032" +
    "\045\037\047\042\052\021\053\031\054\057\103\072\104" +
    "\064\105\074\001\002\000\076\004\045\006\035\007\054" +
    "\014\061\020\066\021\073\023\027\024\047\026\023\030" +
    "\056\031\043\032\050\033\052\034\uff71\035\353\036\055" +
    "\037\071\040\041\041\040\043\032\044\uff71\045\037\047" +
    "\042\052\021\053\031\054\057\075\uff71\103\072\104\064" +
    "\105\074\001\002\000\004\077\354\001\002\000\010\034" +
    "\uff77\044\uff77\075\uff77\001\002\000\074\004\045\006\035" +
    "\007\054\014\061\020\066\021\073\023\027\024\047\026" +
    "\023\030\056\031\043\032\050\033\052\034\uff7b\036\055" +
    "\037\071\040\041\041\040\043\032\044\uff7b\045\037\047" +
    "\042\052\021\053\031\054\057\075\uff7b\103\072\104\064" +
    "\105\074\001\002\000\076\004\045\006\035\007\054\014" +
    "\061\020\066\021\073\023\027\024\047\026\023\030\056" +
    "\031\043\032\050\033\052\034\uff73\035\357\036\055\037" +
    "\071\040\041\041\040\043\032\044\uff73\045\037\047\042" +
    "\052\021\053\031\054\057\075\uff73\103\072\104\064\105" +
    "\074\001\002\000\004\077\360\001\002\000\010\034\uff79" +
    "\044\uff79\075\uff79\001\002\000\066\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\103\072\104\064\105\074\001\002\000\076\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\034" +
    "\uff75\035\363\036\055\037\071\040\041\041\040\043\032" +
    "\044\uff75\045\037\047\042\052\021\053\031\054\057\075" +
    "\uff75\103\072\104\064\105\074\001\002\000\004\077\364" +
    "\001\002\000\010\034\uff74\044\uff74\075\uff74\001\002\000" +
    "\004\100\u0109\001\002\000\004\103\u0103\001\002\000\004" +
    "\100\377\001\002\000\004\103\371\001\002\000\004\010" +
    "\372\001\002\000\004\100\373\001\002\000\066\004\045" +
    "\006\035\007\054\014\061\020\066\021\073\023\027\024" +
    "\047\026\023\030\056\031\043\032\050\033\052\036\055" +
    "\037\071\040\041\041\040\043\032\045\037\047\042\052" +
    "\021\053\031\054\057\103\072\104\064\105\074\001\002" +
    "\000\076\004\045\006\035\007\054\014\061\020\066\021" +
    "\073\023\027\024\047\026\023\030\056\031\043\032\050" +
    "\033\052\034\uff7e\035\375\036\055\037\071\040\041\041" +
    "\040\043\032\044\uff7e\045\037\047\042\052\021\053\031" +
    "\054\057\075\uff7e\103\072\104\064\105\074\001\002\000" +
    "\004\077\376\001\002\000\010\034\uff82\044\uff82\075\uff82" +
    "\001\002\000\074\004\045\006\035\007\054\014\061\020" +
    "\066\021\073\023\027\024\047\026\023\030\056\031\043" +
    "\032\050\033\052\034\uff86\036\055\037\071\040\041\041" +
    "\040\043\032\044\uff86\045\037\047\042\052\021\053\031" +
    "\054\057\075\uff86\103\072\104\064\105\074\001\002\000" +
    "\076\004\045\006\035\007\054\014\061\020\066\021\073" +
    "\023\027\024\047\026\023\030\056\031\043\032\050\033" +
    "\052\034\uff80\035\u0101\036\055\037\071\040\041\041\040" +
    "\043\032\044\uff80\045\037\047\042\052\021\053\031\054" +
    "\057\075\uff80\103\072\104\064\105\074\001\002\000\004" +
    "\077\u0102\001\002\000\010\034\uff84\044\uff84\075\uff84\001" +
    "\002\000\004\022\u0104\001\002\000\004\100\u0105\001\002" +
    "\000\066\004\045\006\035\007\054\014\061\020\066\021" +
    "\073\023\027\024\047\026\023\030\056\031\043\032\050" +
    "\033\052\036\055\037\071\040\041\041\040\043\032\045" +
    "\037\047\042\052\021\053\031\054\057\103\072\104\064" +
    "\105\074\001\002\000\076\004\045\006\035\007\054\014" +
    "\061\020\066\021\073\023\027\024\047\026\023\030\056" +
    "\031\043\032\050\033\052\034\uff7f\035\u0107\036\055\037" +
    "\071\040\041\041\040\043\032\044\uff7f\045\037\047\042" +
    "\052\021\053\031\054\057\075\uff7f\103\072\104\064\105" +
    "\074\001\002\000\004\077\u0108\001\002\000\010\034\uff83" +
    "\044\uff83\075\uff83\001\002\000\074\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\034\uff87\036\055\037" +
    "\071\040\041\041\040\043\032\044\uff87\045\037\047\042" +
    "\052\021\053\031\054\057\075\uff87\103\072\104\064\105" +
    "\074\001\002\000\076\004\045\006\035\007\054\014\061" +
    "\020\066\021\073\023\027\024\047\026\023\030\056\031" +
    "\043\032\050\033\052\034\uff81\035\u010b\036\055\037\071" +
    "\040\041\041\040\043\032\044\uff81\045\037\047\042\052" +
    "\021\053\031\054\057\075\uff81\103\072\104\064\105\074" +
    "\001\002\000\004\077\u010c\001\002\000\010\034\uff85\044" +
    "\uff85\075\uff85\001\002\000\066\004\045\006\035\007\054" +
    "\014\061\020\066\021\073\023\027\024\047\026\023\030" +
    "\056\031\043\032\050\033\052\036\055\037\071\040\041" +
    "\041\040\043\032\045\037\047\042\052\021\053\031\054" +
    "\057\103\072\104\064\105\074\001\002\000\076\004\045" +
    "\006\035\007\054\014\061\020\066\021\073\023\027\024" +
    "\047\026\023\030\056\031\043\032\050\033\052\034\uff7d" +
    "\035\u010f\036\055\037\071\040\041\041\040\043\032\044" +
    "\uff7d\045\037\047\042\052\021\053\031\054\057\075\uff7d" +
    "\103\072\104\064\105\074\001\002\000\004\077\u0110\001" +
    "\002\000\010\034\uff7c\044\uff7c\075\uff7c\001\002\000\004" +
    "\074\u0112\001\002\000\006\034\324\044\323\001\002\000" +
    "\010\034\330\044\327\075\u0114\001\002\000\076\004\uff8a" +
    "\006\uff8a\007\uff8a\014\uff8a\020\uff8a\021\uff8a\023\uff8a\024" +
    "\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\047\uff8a\052\uff8a\053\uff8a\054\uff8a\075\uff8a" +
    "\103\uff8a\104\uff8a\105\uff8a\001\002\000\004\074\u0116\001" +
    "\002\000\006\034\324\044\323\001\002\000\010\034\330" +
    "\044\327\075\u0118\001\002\000\076\004\uff88\006\uff88\007" +
    "\uff88\014\uff88\020\uff88\021\uff88\023\uff88\024\uff88\026\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\043\uff88\044\uff88\045\uff88" +
    "\047\uff88\052\uff88\053\uff88\054\uff88\075\uff88\103\uff88\104" +
    "\uff88\105\uff88\001\002\000\006\023\u011b\103\u011d\001\002" +
    "\000\004\073\u012b\001\002\000\004\103\u011d\001\002\000" +
    "\004\073\uff6b\001\002\000\004\055\u011e\001\002\000\004" +
    "\106\u011f\001\002\000\004\077\u0120\001\002\000\006\070" +
    "\251\103\252\001\002\000\004\077\u0122\001\002\000\006" +
    "\062\u0124\103\u0125\001\002\000\004\073\uff6a\001\002\000" +
    "\004\103\u0129\001\002\000\006\061\u0126\062\u0127\001\002" +
    "\000\004\106\u0128\001\002\000\004\073\uff68\001\002\000" +
    "\004\073\uff69\001\002\000\004\073\uff67\001\002\000\004" +
    "\073\uff6c\001\002\000\004\074\u012c\001\002\000\066\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\036" +
    "\055\037\071\040\041\041\040\043\032\045\037\047\042" +
    "\052\021\053\031\054\057\103\072\104\064\105\074\001" +
    "\002\000\070\004\045\006\035\007\054\014\061\020\066" +
    "\021\073\023\027\024\047\026\023\030\056\031\043\032" +
    "\050\033\052\036\055\037\071\040\041\041\040\043\032" +
    "\045\037\047\042\052\021\053\031\054\057\075\u012e\103" +
    "\072\104\064\105\074\001\002\000\076\004\uff6d\006\uff6d" +
    "\007\uff6d\014\uff6d\020\uff6d\021\uff6d\023\uff6d\024\uff6d\026" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\047\uff6d\052\uff6d\053\uff6d\054\uff6d\075\uff6d\103\uff6d" +
    "\104\uff6d\105\uff6d\001\002\000\006\055\u0131\077\u0130\001" +
    "\002\000\100\004\uffc7\006\uffc7\007\uffc7\014\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\024\uffc7\026\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\073\uffc7\075\uffc7\103\uffc7\104\uffc7\105\uffc7" +
    "\001\002\000\004\022\u0132\001\002\000\006\022\u0133\103" +
    "\u0134\001\002\000\004\077\u0137\001\002\000\004\022\u0135" +
    "\001\002\000\004\077\u0136\001\002\000\100\004\uffc9\006" +
    "\uffc9\007\uffc9\014\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9" +
    "\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\047\uffc9\052\uffc9\053\uffc9\054\uffc9\073\uffc9\075" +
    "\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002\000\100\004\uffc8" +
    "\006\uffc8\007\uffc8\014\uffc8\020\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\073\uffc8" +
    "\075\uffc8\103\uffc8\104\uffc8\105\uffc8\001\002\000\012\055" +
    "\u0140\061\u013c\062\u013f\077\u013e\001\002\000\004\103\u013a" +
    "\001\002\000\004\077\u013b\001\002\000\100\004\uffd0\006" +
    "\uffd0\007\uffd0\014\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\047\uffd0\052\uffd0\053\uffd0\054\uffd0\073\uffd0\075" +
    "\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\004\106\u0146" +
    "\001\002\000\004\077\u0145\001\002\000\100\004\uffd3\006" +
    "\uffd3\007\uffd3\014\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\073\uffd3\075" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\001\002\000\004\077\uffa0" +
    "\001\002\000\004\106\u0141\001\002\000\006\077\uffa1\101" +
    "\u0142\001\002\000\004\106\u0143\001\002\000\004\077\u0144" +
    "\001\002\000\100\004\uffd1\006\uffd1\007\uffd1\014\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\026\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\073\uffd1\075\uffd1\103\uffd1\104\uffd1\105" +
    "\uffd1\001\002\000\100\004\uffd2\006\uffd2\007\uffd2\014\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\073\uffd2\075\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\001\002\000\006\077\uffa2\101\u0147\001\002\000" +
    "\004\106\u0148\001\002\000\004\077\u0149\001\002\000\100" +
    "\004\uffcf\006\uffcf\007\uffcf\014\uffcf\020\uffcf\021\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\073\uffcf\075\uffcf\103\uffcf\104\uffcf\105\uffcf\001\002\000" +
    "\006\070\251\103\252\001\002\000\004\073\u014c\001\002" +
    "\000\004\074\u014d\001\002\000\066\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\103\072\104\064\105\074\001\002\000\070\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\036" +
    "\055\037\071\040\041\041\040\043\032\045\037\047\042" +
    "\052\021\053\031\054\057\075\u014f\103\072\104\064\105" +
    "\074\001\002\000\076\004\uff6f\006\uff6f\007\uff6f\014\uff6f" +
    "\020\uff6f\021\uff6f\023\uff6f\024\uff6f\026\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\043\uff6f\044\uff6f\045\uff6f\047\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\075\uff6f\103\uff6f\104\uff6f\105\uff6f" +
    "\001\002\000\004\077\u015d\001\002\000\034\013\174\042" +
    "\204\056\205\064\171\066\201\072\175\073\173\077\176" +
    "\100\200\101\172\102\177\103\202\106\203\001\002\000" +
    "\004\077\u0159\001\002\000\006\060\253\077\u0158\001\002" +
    "\000\034\013\174\042\204\056\205\064\171\066\201\072" +
    "\175\073\173\077\176\100\200\101\172\102\177\103\202" +
    "\106\203\001\002\000\036\010\u0156\013\211\042\221\056" +
    "\222\064\206\066\216\072\212\073\210\077\214\100\215" +
    "\101\207\102\213\103\217\106\220\001\002\000\004\077" +
    "\u0157\001\002\000\076\004\uff97\006\uff97\007\uff97\014\uff97" +
    "\020\uff97\021\uff97\023\uff97\024\uff97\026\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\043\uff97\044\uff97\045\uff97\047\uff97\052" +
    "\uff97\053\uff97\054\uff97\075\uff97\103\uff97\104\uff97\105\uff97" +
    "\001\002\000\076\004\uff9a\006\uff9a\007\uff9a\014\uff9a\020" +
    "\uff9a\021\uff9a\023\uff9a\024\uff9a\026\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\075\uff9a\103\uff9a\104\uff9a\105\uff9a\001" +
    "\002\000\076\004\uff96\006\uff96\007\uff96\014\uff96\020\uff96" +
    "\021\uff96\023\uff96\024\uff96\026\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\043\uff96\044\uff96\045\uff96\047\uff96\052\uff96\053" +
    "\uff96\054\uff96\075\uff96\103\uff96\104\uff96\105\uff96\001\002" +
    "\000\036\013\211\022\u015b\042\221\056\222\064\206\066" +
    "\216\072\212\073\210\077\214\100\215\101\207\102\213" +
    "\103\217\106\220\001\002\000\004\077\u015c\001\002\000" +
    "\076\004\uff98\006\uff98\007\uff98\014\uff98\020\uff98\021\uff98" +
    "\023\uff98\024\uff98\026\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\043\uff98\044\uff98\045\uff98\047\uff98\052\uff98\053\uff98\054" +
    "\uff98\075\uff98\103\uff98\104\uff98\105\uff98\001\002\000\076" +
    "\004\uff99\006\uff99\007\uff99\014\uff99\020\uff99\021\uff99\023" +
    "\uff99\024\uff99\026\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\043" +
    "\uff99\044\uff99\045\uff99\047\uff99\052\uff99\053\uff99\054\uff99" +
    "\075\uff99\103\uff99\104\uff99\105\uff99\001\002\000\004\103" +
    "\u015f\001\002\000\004\073\u0160\001\002\000\004\077\u0161" +
    "\001\002\000\076\004\uff5b\006\uff5b\007\uff5b\014\uff5b\020" +
    "\uff5b\021\uff5b\023\uff5b\024\uff5b\026\uff5b\030\uff5b\031\uff5b" +
    "\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040" +
    "\uff5b\041\uff5b\043\uff5b\044\uff5b\045\uff5b\047\uff5b\052\uff5b" +
    "\053\uff5b\054\uff5b\075\uff5b\103\uff5b\104\uff5b\105\uff5b\001" +
    "\002\000\004\103\u0163\001\002\000\004\102\u0164\001\002" +
    "\000\004\103\u0165\001\002\000\004\102\u0166\001\002\000" +
    "\004\103\u0167\001\002\000\004\073\u0168\001\002\000\004" +
    "\077\u0169\001\002\000\076\004\uff5c\006\uff5c\007\uff5c\014" +
    "\uff5c\020\uff5c\021\uff5c\023\uff5c\024\uff5c\026\uff5c\030\uff5c" +
    "\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037" +
    "\uff5c\040\uff5c\041\uff5c\043\uff5c\044\uff5c\045\uff5c\047\uff5c" +
    "\052\uff5c\053\uff5c\054\uff5c\075\uff5c\103\uff5c\104\uff5c\105" +
    "\uff5c\001\002\000\004\074\u016b\001\002\000\066\004\045" +
    "\006\035\007\054\014\061\020\066\021\073\023\027\024" +
    "\047\026\023\030\056\031\043\032\050\033\052\036\055" +
    "\037\071\040\041\041\040\043\032\045\037\047\042\052" +
    "\021\053\031\054\057\103\072\104\064\105\074\001\002" +
    "\000\070\004\045\006\035\007\054\014\061\020\066\021" +
    "\073\023\027\024\047\026\023\030\056\031\043\032\050" +
    "\033\052\036\055\037\071\040\041\041\040\043\032\045" +
    "\037\047\042\052\021\053\031\054\057\075\u016d\103\072" +
    "\104\064\105\074\001\002\000\004\103\u016e\001\002\000" +
    "\006\055\u0170\102\u016f\001\002\000\004\064\u0175\001\002" +
    "\000\004\074\u0171\001\002\000\004\106\u0172\001\002\000" +
    "\004\075\u0173\001\002\000\004\077\u0174\001\002\000\100" +
    "\004\uff51\006\uff51\007\uff51\014\uff51\020\uff51\021\uff51\023" +
    "\uff51\024\uff51\026\uff51\030\uff51\031\uff51\032\uff51\033\uff51" +
    "\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51\043" +
    "\uff51\044\uff51\045\uff51\047\uff51\052\uff51\053\uff51\054\uff51" +
    "\073\uff51\075\uff51\103\uff51\104\uff51\105\uff51\001\002\000" +
    "\004\103\u0176\001\002\000\004\055\u0177\001\002\000\004" +
    "\057\u0178\001\002\000\004\103\u0179\001\002\000\004\077" +
    "\u017a\001\002\000\100\004\uff50\006\uff50\007\uff50\014\uff50" +
    "\020\uff50\021\uff50\023\uff50\024\uff50\026\uff50\030\uff50\031" +
    "\uff50\032\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037\uff50" +
    "\040\uff50\041\uff50\043\uff50\044\uff50\045\uff50\047\uff50\052" +
    "\uff50\053\uff50\054\uff50\073\uff50\075\uff50\103\uff50\104\uff50" +
    "\105\uff50\001\002\000\076\004\uff56\006\uff56\007\uff56\014" +
    "\uff56\020\uff56\021\uff56\023\uff56\024\uff56\026\uff56\030\uff56" +
    "\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56\037" +
    "\uff56\040\uff56\041\uff56\043\uff56\044\uff56\045\uff56\047\uff56" +
    "\052\uff56\053\uff56\054\uff56\075\uff56\103\uff56\104\uff56\105" +
    "\uff56\001\002\000\004\074\u017d\001\002\000\034\013\174" +
    "\042\204\056\205\064\171\066\201\072\175\073\173\077" +
    "\176\100\200\101\172\102\177\103\202\106\203\001\002" +
    "\000\036\013\211\042\221\056\222\064\206\066\216\072" +
    "\212\073\210\075\u017f\077\214\100\215\101\207\102\213" +
    "\103\217\106\220\001\002\000\004\077\u0180\001\002\000" +
    "\100\004\uff54\006\uff54\007\uff54\014\uff54\020\uff54\021\uff54" +
    "\023\uff54\024\uff54\026\uff54\030\uff54\031\uff54\032\uff54\033" +
    "\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54" +
    "\043\uff54\044\uff54\045\uff54\047\uff54\052\uff54\053\uff54\054" +
    "\uff54\073\uff54\075\uff54\103\uff54\104\uff54\105\uff54\001\002" +
    "\000\004\022\u0182\001\002\000\004\103\u0183\001\002\000" +
    "\004\022\u0184\001\002\000\004\073\u0185\001\002\000\004" +
    "\077\u0186\001\002\000\076\004\uff5a\006\uff5a\007\uff5a\014" +
    "\uff5a\020\uff5a\021\uff5a\023\uff5a\024\uff5a\026\uff5a\030\uff5a" +
    "\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037" +
    "\uff5a\040\uff5a\041\uff5a\043\uff5a\044\uff5a\045\uff5a\047\uff5a" +
    "\052\uff5a\053\uff5a\054\uff5a\075\uff5a\103\uff5a\104\uff5a\105" +
    "\uff5a\001\002\000\012\055\u018e\061\u018b\062\u013f\077\u018d" +
    "\001\002\000\004\103\u0189\001\002\000\004\077\u018a\001" +
    "\002\000\100\004\uffcb\006\uffcb\007\uffcb\014\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\026\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\073\uffcb\075\uffcb\103\uffcb\104\uffcb\105\uffcb" +
    "\001\002\000\004\106\u0194\001\002\000\004\077\u0193\001" +
    "\002\000\100\004\uffce\006\uffce\007\uffce\014\uffce\020\uffce" +
    "\021\uffce\023\uffce\024\uffce\026\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\043\uffce\044\uffce\045\uffce\047\uffce\052\uffce\053" +
    "\uffce\054\uffce\073\uffce\075\uffce\103\uffce\104\uffce\105\uffce" +
    "\001\002\000\004\106\u018f\001\002\000\006\077\uffa1\101" +
    "\u0190\001\002\000\004\106\u0191\001\002\000\004\077\u0192" +
    "\001\002\000\100\004\uffcc\006\uffcc\007\uffcc\014\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\073\uffcc\075\uffcc\103\uffcc\104\uffcc\105" +
    "\uffcc\001\002\000\100\004\uffcd\006\uffcd\007\uffcd\014\uffcd" +
    "\020\uffcd\021\uffcd\023\uffcd\024\uffcd\026\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\073\uffcd\075\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\001\002\000\006\077\uffa2\101\u0195\001\002\000" +
    "\004\106\u0196\001\002\000\004\077\u0197\001\002\000\100" +
    "\004\uffca\006\uffca\007\uffca\014\uffca\020\uffca\021\uffca\023" +
    "\uffca\024\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\045\uffca\047\uffca\052\uffca\053\uffca\054\uffca" +
    "\073\uffca\075\uffca\103\uffca\104\uffca\105\uffca\001\002\000" +
    "\004\002\ufffe\001\002\000\006\070\251\103\252\001\002" +
    "\000\004\073\u019b\001\002\000\004\074\u019c\001\002\000" +
    "\070\004\045\006\035\007\054\014\061\020\066\021\073" +
    "\023\027\024\047\026\023\030\056\031\043\032\050\033" +
    "\052\036\055\037\071\040\041\041\040\043\032\045\037" +
    "\047\042\052\021\053\031\054\057\075\u019d\103\072\104" +
    "\064\105\074\001\002\000\100\004\uff9b\006\uff9b\007\uff9b" +
    "\014\uff9b\020\uff9b\021\uff9b\023\uff9b\024\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\047\uff9b\052\uff9b\053\uff9b\054\uff9b\075\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\001\002\000\070\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\075\u019f\103\072\104\064\105\074\001\002\000" +
    "\100\004\uff9c\006\uff9c\007\uff9c\014\uff9c\020\uff9c\021\uff9c" +
    "\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\045\uff9c\047\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\075\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002" +
    "\000\100\004\uffc4\006\uffc4\007\uffc4\014\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\073\uffc4\075\uffc4\103\uffc4\104\uffc4\105\uffc4\001" +
    "\002\000\004\022\u01a2\001\002\000\036\013\174\022\u01a4" +
    "\042\204\056\205\064\171\066\201\072\175\073\173\077" +
    "\176\100\200\101\172\102\177\103\202\106\203\001\002" +
    "\000\036\013\211\022\u01a6\042\221\056\222\064\206\066" +
    "\216\072\212\073\210\077\214\100\215\101\207\102\213" +
    "\103\217\106\220\001\002\000\004\077\u01a5\001\002\000" +
    "\100\004\uffc5\006\uffc5\007\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\047\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\073\uffc5\075\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002" +
    "\000\004\077\u01a7\001\002\000\100\004\uffc6\006\uffc6\007" +
    "\uffc6\014\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\026\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\047\uffc6\052\uffc6\053\uffc6\054\uffc6\073\uffc6\075\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\001\002\000\076\004\uff58\006\uff58" +
    "\007\uff58\014\uff58\020\uff58\021\uff58\023\uff58\024\uff58\026" +
    "\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58" +
    "\036\uff58\037\uff58\040\uff58\041\uff58\043\uff58\044\uff58\045" +
    "\uff58\047\uff58\052\uff58\053\uff58\054\uff58\075\uff58\103\uff58" +
    "\104\uff58\105\uff58\001\002\000\004\002\001\001\002\000" +
    "\004\073\u01ab\001\002\000\004\074\u01ac\001\002\000\066" +
    "\004\045\006\035\007\054\014\061\020\066\021\073\023" +
    "\027\024\047\026\023\030\056\031\043\032\050\033\052" +
    "\036\055\037\071\040\041\041\040\043\032\045\037\047" +
    "\042\052\021\053\031\054\057\103\072\104\064\105\074" +
    "\001\002\000\070\004\045\006\035\007\054\014\061\020" +
    "\066\021\073\023\027\024\047\026\023\030\056\031\043" +
    "\032\050\033\052\036\055\037\071\040\041\041\040\043" +
    "\032\045\037\047\042\052\021\053\031\054\057\075\u01ae" +
    "\103\072\104\064\105\074\001\002\000\004\002\ufffc\001" +
    "\002\000\004\060\u01b0\001\002\000\004\103\u01b1\001\002" +
    "\000\006\060\u01b2\101\u01b3\001\002\000\014\004\012\011" +
    "\004\071\007\076\010\107\005\001\002\000\004\103\u01b4" +
    "\001\002\000\004\060\u01b5\001\002\000\014\004\012\011" +
    "\004\071\007\076\010\107\005\001\002\000\004\002\uff45" +
    "\001\002\000\004\002\uff46\001\002\000\004\111\u01b9\001" +
    "\002\000\004\077\u01ba\001\002\000\014\004\012\011\004" +
    "\071\007\076\010\107\005\001\002\000\004\002\uffff\001" +
    "\002\000\004\072\u01bd\001\002\000\004\073\u01be\001\002" +
    "\000\004\074\u01bf\001\002\000\066\004\045\006\035\007" +
    "\054\014\061\020\066\021\073\023\027\024\047\026\023" +
    "\030\056\031\043\032\050\033\052\036\055\037\071\040" +
    "\041\041\040\043\032\045\037\047\042\052\021\053\031" +
    "\054\057\103\072\104\064\105\074\001\002\000\070\004" +
    "\045\006\035\007\054\014\061\020\066\021\073\023\027" +
    "\024\047\026\023\030\056\031\043\032\050\033\052\036" +
    "\055\037\071\040\041\041\040\043\032\045\037\047\042" +
    "\052\021\053\031\054\057\075\u01c1\103\072\104\064\105" +
    "\074\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bf\000\006\002\010\023\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\024\005\043\006\061\010\045\011\064\012\074\013" +
    "\067\014\035\015\027\020\075\026\017\032\032\033\050" +
    "\034\033\035\052\036\057\041\025\042\016\043\023\046" +
    "\021\047\066\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u01a7\046\021\047\066\050\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\005\120\006\125\010\121\011\126\012\130\013" +
    "\127\014\117\015\114\020\131\026\111\032\115\033\122" +
    "\034\116\035\123\036\124\041\113\042\110\043\112\046" +
    "\021\047\066\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\u017a" +
    "\046\021\047\066\050\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\234\046\021" +
    "\047\066\050\062\001\001\000\002\001\001\000\012\006" +
    "\233\046\021\047\066\050\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\076\006\100\026\102\035\101" +
    "\041\077\046\021\047\066\050\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\140\005\043\006\061\010\045\011\064\012\074" +
    "\013\067\014\035\015\027\020\075\026\017\032\032\033" +
    "\050\034\033\035\052\036\057\041\025\042\016\043\023" +
    "\046\021\047\066\050\062\001\001\000\002\001\001\000" +
    "\056\003\106\005\043\006\061\010\045\011\064\012\074" +
    "\013\067\014\035\015\027\020\075\026\017\032\032\033" +
    "\050\034\033\035\052\036\057\041\025\042\016\043\023" +
    "\046\021\047\066\050\062\001\001\000\054\005\120\006" +
    "\125\010\121\011\126\012\130\013\127\014\117\015\114" +
    "\020\131\026\111\032\115\033\122\034\116\035\123\036" +
    "\124\041\113\042\110\043\112\046\021\047\066\050\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\134\001\001\000\056\003\135\005\043\006" +
    "\061\010\045\011\064\012\074\013\067\014\035\015\027" +
    "\020\075\026\017\032\032\033\050\034\033\035\052\036" +
    "\057\041\025\042\016\043\023\046\021\047\066\050\062" +
    "\001\001\000\002\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\005\120\006" +
    "\125\010\121\011\126\012\130\013\127\014\117\015\114" +
    "\020\131\026\111\032\115\033\122\034\116\035\123\036" +
    "\124\041\113\042\110\043\112\046\021\047\066\050\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\243\005\043\006\061\010" +
    "\045\011\064\012\074\013\067\014\035\015\027\020\075" +
    "\026\017\032\032\033\050\034\033\035\052\036\057\041" +
    "\025\042\016\043\023\046\021\047\066\050\062\001\001" +
    "\000\054\005\120\006\125\010\121\011\126\012\130\013" +
    "\127\014\117\015\114\020\131\026\111\032\115\033\122" +
    "\034\116\035\123\036\124\041\113\042\110\043\112\046" +
    "\021\047\066\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\270\001" +
    "\001\000\004\044\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\315\046\021\047" +
    "\066\050\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\337\005\043\006\061\010\045\011\064\012\074\013\067" +
    "\014\035\015\027\020\075\026\017\032\032\033\050\034" +
    "\033\035\052\036\057\041\025\042\016\043\023\046\021" +
    "\047\066\050\062\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\343\005" +
    "\043\006\061\010\045\011\064\012\074\013\067\014\035" +
    "\015\027\020\075\026\017\032\032\033\050\034\033\035" +
    "\052\036\057\041\025\042\016\043\023\046\021\047\066" +
    "\050\062\001\001\000\054\005\120\006\125\010\121\011" +
    "\126\012\130\013\127\014\117\015\114\020\131\026\111" +
    "\032\115\033\122\034\116\035\123\036\124\041\113\042" +
    "\110\043\112\046\021\047\066\050\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\351\005\043\006\061\010\045\011\064" +
    "\012\074\013\067\014\035\015\027\020\075\026\017\032" +
    "\032\033\050\034\033\035\052\036\057\041\025\042\016" +
    "\043\023\046\021\047\066\050\062\001\001\000\054\005" +
    "\120\006\125\010\121\011\126\012\130\013\127\014\117" +
    "\015\114\020\131\026\111\032\115\033\122\034\116\035" +
    "\123\036\124\041\113\042\110\043\112\046\021\047\066" +
    "\050\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\355\005\043\006\061\010\045\011\064\012\074" +
    "\013\067\014\035\015\027\020\075\026\017\032\032\033" +
    "\050\034\033\035\052\036\057\041\025\042\016\043\023" +
    "\046\021\047\066\050\062\001\001\000\054\005\120\006" +
    "\125\010\121\011\126\012\130\013\127\014\117\015\114" +
    "\020\131\026\111\032\115\033\122\034\116\035\123\036" +
    "\124\041\113\042\110\043\112\046\021\047\066\050\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\361\005\043\006\061\010\045\011\064\012\074\013\067" +
    "\014\035\015\027\020\075\026\017\032\032\033\050\034" +
    "\033\035\052\036\057\041\025\042\016\043\023\046\021" +
    "\047\066\050\062\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\373\005\043\006" +
    "\061\010\045\011\064\012\074\013\067\014\035\015\027" +
    "\020\075\026\017\032\032\033\050\034\033\035\052\036" +
    "\057\041\025\042\016\043\023\046\021\047\066\050\062" +
    "\001\001\000\054\005\120\006\125\010\121\011\126\012" +
    "\130\013\127\014\117\015\114\020\131\026\111\032\115" +
    "\033\122\034\116\035\123\036\124\041\113\042\110\043" +
    "\112\046\021\047\066\050\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\377\005\043\006\061\010" +
    "\045\011\064\012\074\013\067\014\035\015\027\020\075" +
    "\026\017\032\032\033\050\034\033\035\052\036\057\041" +
    "\025\042\016\043\023\046\021\047\066\050\062\001\001" +
    "\000\054\005\120\006\125\010\121\011\126\012\130\013" +
    "\127\014\117\015\114\020\131\026\111\032\115\033\122" +
    "\034\116\035\123\036\124\041\113\042\110\043\112\046" +
    "\021\047\066\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u0105\005\043\006\061\010\045\011\064\012\074\013\067" +
    "\014\035\015\027\020\075\026\017\032\032\033\050\034" +
    "\033\035\052\036\057\041\025\042\016\043\023\046\021" +
    "\047\066\050\062\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\u0109\005" +
    "\043\006\061\010\045\011\064\012\074\013\067\014\035" +
    "\015\027\020\075\026\017\032\032\033\050\034\033\035" +
    "\052\036\057\041\025\042\016\043\023\046\021\047\066" +
    "\050\062\001\001\000\054\005\120\006\125\010\121\011" +
    "\126\012\130\013\127\014\117\015\114\020\131\026\111" +
    "\032\115\033\122\034\116\035\123\036\124\041\113\042" +
    "\110\043\112\046\021\047\066\050\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\u010d\005\043\006" +
    "\061\010\045\011\064\012\074\013\067\014\035\015\027" +
    "\020\075\026\017\032\032\033\050\034\033\035\052\036" +
    "\057\041\025\042\016\043\023\046\021\047\066\050\062" +
    "\001\001\000\054\005\120\006\125\010\121\011\126\012" +
    "\130\013\127\014\117\015\114\020\131\026\111\032\115" +
    "\033\122\034\116\035\123\036\124\041\113\042\110\043" +
    "\112\046\021\047\066\050\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u0119\030\u011b\001\001\000\002\001\001" +
    "\000\004\030\u0129\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0120" +
    "\001\001\000\002\001\001\000\004\007\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u012c" +
    "\005\043\006\061\010\045\011\064\012\074\013\067\014" +
    "\035\015\027\020\075\026\017\032\032\033\050\034\033" +
    "\035\052\036\057\041\025\042\016\043\023\046\021\047" +
    "\066\050\062\001\001\000\054\005\120\006\125\010\121" +
    "\011\126\012\130\013\127\014\117\015\114\020\131\026" +
    "\111\032\115\033\122\034\116\035\123\036\124\041\113" +
    "\042\110\043\112\046\021\047\066\050\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u014d\005\043\006\061\010\045\011\064\012\074\013\067" +
    "\014\035\015\027\020\075\026\017\032\032\033\050\034" +
    "\033\035\052\036\057\041\025\042\016\043\023\046\021" +
    "\047\066\050\062\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0159\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u016b\005\043\006\061\010\045\011\064\012\074" +
    "\013\067\014\035\015\027\020\075\026\017\032\032\033" +
    "\050\034\033\035\052\036\057\041\025\042\016\043\023" +
    "\046\021\047\066\050\062\001\001\000\054\005\120\006" +
    "\125\010\121\011\126\012\130\013\127\014\117\015\114" +
    "\020\131\026\111\032\115\033\122\034\116\035\123\036" +
    "\124\041\113\042\110\043\112\046\021\047\066\050\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\u017d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u018b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\u019d\005\043\006\061\010\045\011\064" +
    "\012\074\013\067\014\035\015\027\020\075\026\017\032" +
    "\032\033\050\034\033\035\052\036\057\041\025\042\016" +
    "\043\023\046\021\047\066\050\062\001\001\000\002\001" +
    "\001\000\054\005\120\006\125\010\121\011\126\012\130" +
    "\013\127\014\117\015\114\020\131\026\111\032\115\033" +
    "\122\034\116\035\123\036\124\041\113\042\110\043\112" +
    "\046\021\047\066\050\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u01a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u01ac\005\043\006\061\010\045\011\064\012\074\013\067" +
    "\014\035\015\027\020\075\026\017\032\032\033\050\034" +
    "\033\035\052\036\057\041\025\042\016\043\023\046\021" +
    "\047\066\050\062\001\001\000\054\005\120\006\125\010" +
    "\121\011\126\012\130\013\127\014\117\015\114\020\131" +
    "\026\111\032\115\033\122\034\116\035\123\036\124\041" +
    "\113\042\110\043\112\046\021\047\066\050\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\u01b6\023\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u01b5\023\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u01ba\023\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u01bf\005\043\006\061\010\045\011" +
    "\064\012\074\013\067\014\035\015\027\020\075\026\017" +
    "\032\032\033\050\034\033\035\052\036\057\041\025\042" +
    "\016\043\023\046\021\047\066\050\062\001\001\000\054" +
    "\005\120\006\125\010\121\011\126\012\130\013\127\014" +
    "\117\015\114\020\131\026\111\032\115\033\122\034\116" +
    "\035\123\036\124\041\113\042\110\043\112\046\021\047" +
    "\066\050\062\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // VARIABLE ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // VARIABLE ::= Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // VARIABLE ::= Short 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VARIABLE ::= Long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VARIABLE ::= Goto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VARIABLE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // LIBRERIA ::= Numeral Include Op_relacional Identificador Punto Identificador Op_relacional INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // LIBRERIA ::= Numeral Include Op_relacional Identificador Op_relacional INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_INCLUDE ::= Comillas LIBRERIA Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_INCLUDE ::= Op_relacional LIBRERIA Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INCLUDE ::= Numeral Include SENTENCIA_INCLUDE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DEFINE ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TYPE_DEF ::= Typedef CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TYPE_DEF ::= Typedef EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TYPE_DEF ::= Typedef REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TYPE_DEF ::= Typedef UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TYPE_DEF ::= Typedef DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPE_DEF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // UNION ::= Union Identificador Llave_a SENTENCIA Llave_c Identificador Coma Multiplicacion Identificador Igual Op_logico Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNION",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // UNION ::= Union Identificador Llave_a SENTENCIA Llave_c Identificador Igual Llave_a Numero Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNION",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // STRUCT ::= Struct Llave_a SENTENCIA Llave_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ENUM ::= Enum Identificador Llave_a CADENA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENUM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CONST ::= Const DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXTERN ::= Extern DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXTERN",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // REGISTER ::= Register DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("REGISTER",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // UNSIGNED ::= Unsigned DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SIZEOF ::= SizeOf Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SIZEOF",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SYSTEM ::= Sistema Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SYSTEM",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LEER_T ::= Gets Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LEER_T ::= Fgets Parentesis_a Identificador Coma Identificador Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LEER_T ::= Scan Parentesis_a Comillas CADENA Comillas Coma Op_logico Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LEER_T ::= Scan Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LEER_T ::= Scan Parentesis_a Comillas CADENA Comillas Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO_PRINT ::= Comillas CADENA B_Slash Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO_PRINT ::= Comillas B_Slash Identificador CADENA Comillas Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO_PRINT ::= Comillas B_Slash Identificador CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO_PRINT ::= Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO_PRINT ::= Modulo Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO_PRINT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRINT ::= Print Parentesis_a TIPO_PRINT Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_FOR ::= TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_FOR ::= T_datoN TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASE ::= CASE Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASE ::= CASE Case Comillas Identificador Comillas Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASE ::= CASE Case Identificador Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASE ::= CASE Case Numero Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CASE ::= CASE Default Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CASE ::= CASE Default Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CASE ::= CASE Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CASE ::= CASE Case Comillas Identificador Comillas Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASE ::= CASE Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE ::= CASE Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE ::= CASE Case Identificador Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASE ::= CASE Case Numero Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE ::= Default Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE ::= Default Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE ::= Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE ::= Case Comillas Identificador Comillas Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE ::= Case Identificador Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE ::= Case Numero Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= Case Comillas_S Identificador Comillas_S Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE ::= Case Comillas Identificador Comillas Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE ::= Case Identificador Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE ::= Case Numero Dos_P SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE ::= Case Identificador Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE ::= Case Numero Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCH ::= Switch Parentesis_a DECLARACION Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SWITCH ::= Switch Parentesis_a Numero Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO_SENTENCIA_B ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO_SENTENCIA_B ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO_SENTENCIA_B ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO_SENTENCIA_B ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO_SENTENCIA_B ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_RETORNO ::= Return SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_RETORNO ::= Return Comillas_S CADENA Comillas_S P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_RETORNO ::= Return Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_RETORNO ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_RETORNO ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELSE ::= IF Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO_DECLARACION_C ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_C",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO_DECLARACION_N ::= Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO_DECLARACION_N ::= Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO_DECLARACION_N ::= Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CHAR ::= Char Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CHAR ::= Char Identificador Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CHAR ::= Char Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CHAR",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CADENA_CON_SALTO ::= CADENA Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CON_SALTO",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CADENA ::= CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CADENA ::= CADENA Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CADENA ::= CADENA Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CADENA ::= CADENA Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CADENA ::= CADENA Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CADENA ::= CADENA Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CADENA ::= CADENA Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CADENA ::= CADENA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CADENA ::= CADENA Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CADENA ::= CADENA Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CADENA ::= CADENA Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CADENA ::= CADENA Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CADENA ::= CADENA Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CADENA ::= Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CADENA ::= Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CADENA ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CADENA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CADENA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CADENA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CADENA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CADENA ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CADENA ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CADENA ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CADENA ::= Dos_P 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CADENA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= UNION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= ENUM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= CHAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= CHAR Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= CHAR Igual Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_datoN Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= T_datoN Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= T_datoN Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_datoN Identificador TIPO_DECLARACION_N P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_datoN Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Int Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Int Identificador TIPO_DECLARACION_N P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Identificador Igual Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Identificador Igual Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= TYPE_DEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA TYPE_DEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA EXTERN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA REGISTER 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA CONST 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Vacio Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Using Namespace Std P_coma INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

